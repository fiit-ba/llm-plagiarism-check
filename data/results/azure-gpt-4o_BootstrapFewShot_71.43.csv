L,case,sample_1,sample_2,plagiarized,reason,pred_predicted,pred_explanation
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T07 {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println(""Enter a 4-by-4 matrix row by row"");
        double[][] a = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                a[i][j] = s.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(a));
    }

    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if(i==j)
                    sum += m[i][j];
            }
        }

        return sum;
    }

}",False,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The main difference lies in the implementation of the `sumMajorDiagonal` method. In the first sample, the method directly sums the diagonal elements using a single loop, while in the second sample, the method uses nested loops and an `if` condition to achieve the same result. Despite this difference, the core logic and"
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;
public class T07
{
   public static void main(String[] args)
   {
      
      Scanner sc = new Scanner(System.in);
      double[][] numbers = new double[4][4];
      System.out.println(""Enter a 4-by4 matrix row by row:"");

      for(int i=0;i < 4;i++)
      {
         String rows = sc.nextLine();
         String[] rowssplit = rows.split(""\\s+"");
         for (int j = 0; j < 4; j++)
         {
            numbers[i][j] = Double.parseDouble(rowssplit[j]);
         }
      }
     System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(numbers));

   }
   public static double sumMajorDiagonal (double[][] m)
   {
      double jumdiagonal = 0;
      for(int i=0;i < 4;i++)
      {
         for(int j = 0; j < 4; j++)
         {
            if(i == j)
            {
               jumdiagonal = jumdiagonal + m[i][j];
            }
         }
       }
       return jumdiagonal;
    }

}",False,,False,"The two code samples share the same core functionality: they both prompt the user to enter a 4x4 matrix, and then calculate the sum of the elements in the major diagonal. However, the implementation details differ significantly. The first sample reads the matrix elements directly into a 2D array using nested loops, while the second sample reads each row as a string and then splits it into individual elements. Additionally, the method for summing the diagonal elements is implemented differently in each sample. These differences in approach and implementation suggest that the code samples were independently"
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.util.Scanner;

public class T07 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] arr = new double[4][4];
        
        System.out.println(""Enter a 4-by-4 row by row: "");
        for(int i = 0; i < 4; i++) {
            for(int j = 0; j < 4; j++) {
                arr[i][j] = sc.nextDouble();
            }
            System.out.print("""");
        }
        sumMajorDiagonal(arr);
    }
    
    public static double sumMajorDiagonal(double[][] m) {
        double total = m[0][0] + m[1][1] + m[2][2] + m[3][3];
        System.out.println(""Sum of the elements in the major diagonal is "" + total);
        return total;
    }
}",False,,True,"The two code samples are very similar in terms of structure and logic. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The main differences are in variable names and minor formatting. The second sample explicitly sums the diagonal elements in the `sumMajorDiagonal` method, while the first sample uses a loop. Despite these differences, the core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes.

Plagiarized"
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {
    public static double sumMajorDiagonal(double[][] m){
        double hasil=0;
        for(int i=0;i<4;i++){
            hasil+=m[i][i];
        }
        return hasil;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        double[][] m=new double[4][4];
        System.out.println(""Enter a 4-by-4 matrix row by row:"");
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                m[i][j]=sc.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(m));
    }
}",False,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal using a method with the same name (`sumMajorDiagonal`). The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.text.DecimalFormat;
import java.util.Scanner;

/**
 *
 * @author C2FE677A63FFD5B7FFD8FACBF327DAD0
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        double a[][] =new double[4][4];
        for (int i=0;i<4;i++)
        {
            for (int j=0;j<4;j++)
            {
                 a[i][j]=sc.nextDouble();
            }
          }
        
        
        for (int i=0;i<4;i++)
        {
            for (int j=0;j<4;j++)
            {   if(a[i][j]%1==0){
                    DecimalFormat decimalFormat = new DecimalFormat(""#"");
                    String numberAsString = decimalFormat.format(a[i][j]);
                    System.out.print(numberAsString);
                }
                else{
                        System.out.print(a[i][j]);
                }
                System.out.print("" "");
            }
              System.out.println("""");
        }
        
        
         
        System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(a));
    }
    
public static double sumMajorDiagonal(double[][] array)
{
    double total = 0;

    for (int index = 0; index < array.length; index++)
    {
            total += array[index][index];
    }

    return total;
}
}",False,,False,"The two code samples share a similar core functionality of reading a 4x4 matrix from user input and calculating the sum of the elements in the major diagonal. However, there are significant differences in their implementation details. The second sample includes additional functionality for formatting the matrix elements before printing them, which is not present in the first sample. Additionally, the second sample uses a different class structure and includes comments and author information. These differences suggest that while the core logic is similar, the second sample has been independently developed with additional features and a different approach."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
import java.util.Scanner;

public class t07 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] matriks = new double[4][4];
        System.out.println(""Enter a 4-by-4 matrix row by row: "");
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matriks[i][j] = sc.nextDouble();
            }

        }

        System.out.println(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(matriks));
    }

    public static double sumMajorDiagonal(double[][] m) {
        double hasil = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i == j) {
                    hasil += m[i][j];
                }
            }

        }
        return hasil;
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T07 {
    static Scanner sc = new Scanner(System.in);
    public static double sumMajorDiagonal(double[][] m) {
        double hasil = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = sc.nextDouble();
                if(i==j){
                    hasil += m[i][j];
                }
            }
        }
        return hasil;
    }
    public static void main(String[] args) {
        
        double[][] m = new double[4][4];
        System.out.println(""Enter a 4-by-4 matrix row by row:"");
        System.out.println(""Sum of the elements in the major diagonal is ""+sumMajorDiagonal(m));
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal using a similar approach. The differences in variable names and the slight variation in the order of operations (inputting the matrix elements and summing the diagonal) are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T07 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        System.out.println(""Enter a 4-by-4 matrix row to row : "");
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = sc.nextDouble();
            }
        }
        double result = sumMajorDiagonal(matrix);
        System.out.println(""Sum of the element in the major diagonal is "" + result);
    }

    public static double sumMajorDiagonal(double[][] m) {
        double result = 0;
        for (int i = 0; i < 4; i++) {
            result+=m[i][i];
        }
        return result;
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal using the same logic. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;
/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T07 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        double[][] matrix = new double[4][4];
        Scanner sc = new Scanner(System.in);
        System.out.println(""Enter a 4-by-4 matrix row by row"");
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                matrix[i][j] = sc.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix));
    }
    
    public static double sumMajorDiagonal(double[][] m){
        double sum = 0;
        for(int i=0;i<4;i++){
            sum += m[i][i];
        }
        return sum;
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D Afiany 2451041557A22145B3701B0184109CAB035
 */
public class T07 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        double[][] m = new double[4][4];
        System.out.println(""Enter a 4-by-4 matrix row by row: "");
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m.length; j++) {
                m[i][j] = sc.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(m));
    }

    public static double sumMajorDiagonal(double[][] m) {
        double tambah = m[0][0] + m[1][1] + m[2][2] + m[3][3];
        return tambah;
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No7 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        double[][] matrix = new double[4][4];
        Scanner sc = new Scanner(System.in);
        System.out.println(""Enter a 4-by-4 matrix row by row"");
        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                matrix[i][j] = sc.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix));
    }
    
    public static double sumMajorDiagonal(double[][] m){
        double sum = 0;
        for(int i=0;i<4;i++){
            sum += m[i][i];
        }
        return sum;
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 2645BB47F923271FA1FC06C04E9691EA
 */
public class Soal7 {
    
    public static double sumMajorDiagonal(double[][] m){
        double hasil=0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if(i==j){
                    hasil += m[i][j];
                }
            }
        }
        return hasil;
    }
    
    public static void main(String[] args) {
        double[][] m = new double[4][4];
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = sc.nextDouble();
            }
        }
        System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
    }
    
         
}",False,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix, and then calculate the sum of the elements in the major diagonal using a similar method. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static double hasilPertambahanDiagonal(double[][] m) {
        double sum = 0;
        
        for (int i = 0; i < m.length; i++)
            sum += m[i][i];
        
        return sum;
    }
    
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] n = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                n[i][j] = input.nextDouble();
            }
        }
        
        System.out.print(""Sum of the elements in the major diagonal is "" + hasilPertambahanDiagonal(n));
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
		// menambahkan seluruh isi array
	public static double sum(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
	
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		int i,j;
		
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] ma = new double[4][4];
		//masukan array
		Scanner input = new Scanner(System.in);
		for (i = 0; i < 4; i++)
			for (j = 0; j < 4; j++)
				ma[i][j] = input.nextDouble();
		System.out.print(""Sum of the elements in the major diagonal is ""+ sum(ma));
	}
	

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class arraylebihdarisatu {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];//inisialisai array 2 dimensi
                                      
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y< 4; y++) {
                matrix[x][y] = sc.nextDouble();//menginput angka ke dalam array 2d
            }
                          
        }
        double hasil;
        hasil=HitungDiagonal(matrix);                         
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);//menampilkan fungsi hasil perhitungan diagonal
    }

    public static double HitungDiagonal(double[][] matriks) {//fungsi untuk mengitung diagonal
        double total;
        total = 0;
        for (int i = 0; i < matriks.length; i++) {
            total += matriks[i][i];
        }
        return total;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4x4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using a helper method. The differences in variable names, comments, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {
    //function for Summary
    public static double sumMajorDiagonal(double[][] mtx) {
        double sum = 0;

        for (int i = 0; i < mtx.length; i++)
            sum += mtx[i][i];
        return sum;
    }

    public static void main(String[] args) {

        double[][] mtx = new double[4][4];
        Scanner s = new Scanner(System.in);
        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");


        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                mtx[i][j] = s.nextDouble();


        System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L3 {

    public static void main(String[] args) {
        //minta input
        Scanner inp = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        System.out.print(""Enter a 4 by 4 matrix row by row: "");

        //input the matrix
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = inp.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonalKanan(matrix));
    }

    public static double jumlahDiagonalKanan(double[][] matrix) {
        double sum = 0;
        for (int i = 0; i < matrix.length; i++) {
            sum += matrix[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same logic. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        double[][] matriks = new double[4][4];
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        for (int bar = 0; bar < 4; bar++) {
            for (int kol = 0; kol < 4; kol++) {
                matriks[bar][kol] = scan.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is ""
                + diagonal(matriks));
    }

    public static double diagonal(double[][] x) {
        double jumlah = 0;
        for (int i = 0; i < x.length; i++)
            jumlah += x[i][i];
        return jumlah;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using a similar method. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

public class L3 {

    public static double jumlahDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] m = new double[4][4];
        System.out.print(""Enter a 4 by 4 matrix row by row: "");

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = sc.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same approach. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        double[][] arr;
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        arr = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = input.nextDouble();
            }
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(arr));
    }

    public static double sumMajorDiagonal(double[][] m) {
        // Menjumlahkan angka yang terdapat di dalam array
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as variable names and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] n = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                n[i][j] = input.nextDouble();
            }
        }
        
        double sum = 0;
        
        for (int i = 0; i < n.length; i++)
            sum += n[i][i];
        
        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal using the same approach. The only differences are minor formatting changes and the addition of a method in the first sample to encapsulate the diagonal sum calculation. These differences are superficial and do not indicate independent development."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus7 {

    public static void inputMatrix(double[][] matrix, int n) {
        Scanner sc = new Scanner(System.in);
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextDouble();
            }
        }
    }
    
    public static void sumMajorDiagonal(double[][] matrix) {
        double sum = 0;
        for (int i = 0; i < matrix.length; i++) {
            sum += matrix[i][i];
        }
        System.out.println(""Sum of the elements in the major diagonal is "" + sum);
    }
    
    public static void main(String[] args) {
        
        int n=4;
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[n][n];
        
        inputMatrix(matrix, n);
        sumMajorDiagonal(matrix);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal. The differences in method organization and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
		// menambahkan seluruh isi array
	public static double sum(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
	
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		int i,j;
		
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] ma = new double[4][4];
		//masukan array
		Scanner input = new Scanner(System.in);
		for (i = 0; i < 4; i++)
			for (j = 0; j < 4; j++)
				ma[i][j] = input.nextDouble();
			
					double sum = 0;
		for ( i = 0; i < ma.length; i++)
			sum += ma[i][i];

		System.out.print(""Sum of the elements in the major diagonal is ""+ sum);
	}
	

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, calculate the sum of the elements in the major diagonal using the same logic, and then print the result. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {
    static Scanner s = new Scanner(System.in);
    public static void inputData(double[][] mtx){

        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                mtx[i][j] = s.nextDouble();

    }
    //function for Summary
    public static double sumMajorDiagonal(double[][] mtx) {
        double sum = 0;

        for (int i = 0; i < mtx.length; i++)
            sum += mtx[i][i];
        return sum;
    }

    public static void main(String[] args) {

        double[][] mtx = new double[4][4];

        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        inputData(mtx);



        System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences in method organization and variable names are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        double[][] arr;
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        arr = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = input.nextDouble();
            }
        }
        // Menjumlahkan angka yang terdapat di dalam array
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i][i];
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sum);
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        double[][] matriks;
        matriks = new double[4][4];
        double sum = 0;
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        for (int b = 0; b < 4; b++) {
            for (int k = 0; k < 4; k++) {
                matriks[b][k] = in.nextDouble();
            }
        }
        
        for (int x = 0; x < matriks.length; x++){
            sum += matriks[x][x];
        }
            
        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L4 {

    public static void main(String[] args) {
        //minta input
        Scanner inp = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        System.out.print(""Enter a 4 by 4 matrix row by row: "");

        //input the matrix
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = inp.nextDouble();
            }
        }
        double sum = 0;
        for (int i = 0; i < matrix.length; i++) {
            sum += matrix[i][i];
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal using the same approach. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

public class L4 {

    public static double jumlahDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }

    public static void print(double[][] m) {
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] m = new double[4][4];
        System.out.println(""Enter a 4 by 4 matrix row by row: "");

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = sc.nextDouble();
            }
        }
        print(m);
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, calculate the sum of the elements in the major diagonal using the same approach, and then print the result. The differences in method names, variable names, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class arraylebihdarisatu {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];//inisialisai array 2 dimensi
                                      
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y< 4; y++) {
                matrix[x][y] = sc.nextDouble();//menginput angka ke dalam array 2d
            }
                          
        }
        double hasil;
        hasil = 0;
        for (int i = 0; i < matrix.length; i++) {
            hasil += matrix[i][i];
        }
                         
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);//menampilkan fungsi hasil perhitungan diagonal
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same approach. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] n = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                n[i][j] = input.nextDouble();
            }
        }
        
        double sum = 0;
        
        int i=0;
        while(i<n.length){
            sum += n[i][i];
        }
            
        
        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,False,"The two code samples share a similar goal of calculating the sum of the elements in the major diagonal of a 4x4 matrix entered by the user. However, there are significant differences in their implementation. The first sample uses nested `for` loops to populate the matrix and a separate method `sumMajorDiagonal` to calculate the sum using a `for` loop. The second sample also uses nested `for` loops to populate the matrix but calculates the sum directly in the `main` method using a `while` loop. The differences in the approach"
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus7 {
    
    public static void sumMajorDiagonal(double[][] matrix, int n) {
        double sum = 0;
        Scanner sc = new Scanner(System.in);
        
        for (int i = 0; i < n; i++) {
            int j=0;
            while(j<n) {
                 matrix[i][j] = sc.nextDouble();
                j++;
            }
        }
        
        for (int i = 0; i < matrix.length; i++) {
            sum += matrix[i][i];
        }
        System.out.println(""Sum of the elements in the major diagonal is "" + sum);
    }
    
    public static void main(String[] args) {
        
        int n=4;
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[n][n];
        
        sumMajorDiagonal(matrix , n);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, calculate the sum of the elements in the major diagonal, and then print the result. The differences in method organization and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
		// menambahkan seluruh isi array
	public static double sum(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
	
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		int i,j;
		
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] ma = new double[4][4];
		//masukan array
		Scanner input = new Scanner(System.in);
		for (i = 0; i < 4; i++)
			for (j = 0; j < 4; j++)
				ma[i][j] = input.nextDouble();
			
					double sum = 0;
		i=0;
		while(i<ma.length)
		{
			sum += ma[i][i];
			i++;
		}
			

		System.out.print(""Sum of the elements in the major diagonal is ""+ sum);
	}
	

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal using the same approach. The differences in variable names, minor formatting, and the use of a while loop in the second sample instead of a for loop in the first sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other.

Plagiar"
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {
    static Scanner s = new Scanner(System.in);
    public static void inputData(double[][] mtx){
        int i =0;
        int j=0;
        while(i<4) {
            while(j<4){
                mtx[i][j] = s.nextDouble();
                j++;
            }
			j=0;
        i++;
        }

    }
    //function for Summary
    public static double sumMajorDiagonal(double[][] mtx) {
        double sum = 0;

        for (int i = 0; i < mtx.length; i++)
            sum += mtx[i][i];
        return sum;
    }

    public static void main(String[] args) {

        double[][] mtx = new double[4][4];

        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        inputData(mtx);

        System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences in the way the input is handled (using nested for loops in the first sample and nested while loops in the second sample) and the addition of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was"
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        double[][] arr;
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        arr = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = input.nextDouble();
            }
        }
        // Menjumlahkan angka yang terdapat di dalam array
        double sum;
        sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i][i];
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sum);
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same logic. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] matriks = new double[4][4];
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        for (int bar = 0; bar < 4; bar++) {
            for (int kol = 0; kol < 4; kol++) {
                matriks[bar][kol] = sc.nextDouble();
            }
        }
        
        hasil(matriks);
    }

    public static double sum(double[][] x) {
        double jumlah = 0;
        int i = 0;
        while(i < 4){
            jumlah += x[i][i];
            i++;
        }
        return jumlah;
    }

    //fungsi output program
    private static void hasil(double[][] x) {
        System.out.print(""Sum of the elements in the major diagonal is ""+ sum(x));
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using a similar approach. The differences in variable names, minor formatting, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L5 {

    public static void main(String[] args) {
        //minta input
        Scanner inp = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        int i = 0;
        double sum = 0;
        System.out.print(""Enter a 4 by 4 matrix row by row: "");

        //input the matrix
        while (i < 4) {
            int j = 0;
            while (j < 4) {
                matrix[i][j] = inp.nextDouble();
                j++;
            }
            i++;
        }

        i = 0;
        while (i < matrix.length) {
            sum += matrix[i][i];
            i++;
        }

        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal. The differences in variable names, loop structures, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

public class L5 {

    public static double jumlahDiagonal(double[][] m) {
        double sum = 0;
        int hit = 0;

        while (hit != m.length) {
            sum += m[hit][hit];
            hit++;
        }
        return sum;
    }

    public static void print(double[][] m) {
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] m = new double[4][4];
        System.out.println(""Enter a 4 by 4 matrix row by row: "");

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = sc.nextDouble();
            }
        }
        print(m);
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, calculate the sum of the elements in the major diagonal using the same logic, and then print the result. The differences in variable names and the use of a while loop in the second sample instead of a for loop are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class arraylebihdarisatu {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];//inisialisai array 2 dimensi
                                      
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y< 4; y++) {
                matrix[x][y] = sc.nextDouble();//menginput angka ke dalam array 2d
            }
                          
        }
        double hasil;
        hasil=HitungDiagonal(matrix);                         
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ hasil);//menampilkan fungsi hasil perhitungan diagonal
    }

    public static double HitungDiagonal(double[][] matriks) {//fungsi untuk mengitung diagonal
        double total;
        total = 0;
        int i;
        i=0;
        while(i<matriks.length){
         total+=matriks[i][i];
         i++;
        }
        return total;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, calculate the sum of the elements in the major diagonal using the same approach, and then print the result. The differences in variable names, comments, and the use of a while loop in the second sample instead of a for loop are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other.

Plagiarized"
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] n = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                n[i][j] = input.nextDouble();
            }
        }
        
        System.out.print(""Sum of the elements in the major diagonal is "" + hasilPertambahanDiagonal(n));
    }

    public static double hasilPertambahanDiagonal(double[][] m) {
        double sum = 0;
        
        for (int i = 0; i < m.length; i++)
            sum += m[i][i];
        
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same logic. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] ma = new double[4][4];
		//masukan array
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				ma[i][j] = input.nextDouble();
		System.out.print(""Sum of the elements in the major diagonal is ""+ sum(ma));
	}
	
	// menambahkan seluruh isi array
	public static double sum(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same logic. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class arraylebihdarisatu {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];//inisialisai array 2 dimensi
                                      
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y< 4; y++) {
                matrix[x][y] = sc.nextDouble();//menginput angka ke dalam array 2d
            }
                          
        }
                                 
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ HitungDiagonal(matrix));//menampilkan fungsi hasil perhitungan diagonal
    }

    public static double HitungDiagonal(double[][] matriks) {//fungsi untuk mengitung diagonal
        double total = 0;
        for (int i = 0; i < matriks.length; i++) {
            total += matriks[i][i];
        }
        return total;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using a similar method. The differences in variable names, comments, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] mtx = new double[4][4];

        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                mtx[i][j] = s.nextDouble();


        System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));
    }
    //function for Summary
    public static double sumMajorDiagonal(double[][] mtx) {
        double sum = 0;

        for (int i = 0; i < mtx.length; i++)
            sum += mtx[i][i];
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are limited to variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L2 {

    public static void main(String[] args) {
        //minta input
        Scanner inp = new Scanner(System.in);
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];
        //input the matrix
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                matrix[i][j] = inp.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonalKanan(matrix));
    }

    public static double jumlahDiagonalKanan(double[][] matrix) {
        double sum = 0;
        for (int i = 0; i < matrix.length; i++) {
            sum += matrix[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same logic. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[4][4];
        for (int x = 0; x < 4; x++) 
        {
            for (int y = 0; y < 4; y++) 
            {
                matrix[x][y] = sc.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is ""
                + hitungDiagonal(matrix));
    }

    public static double hitungDiagonal(double[][] matrix) 
    {
        double jumlah = 0;
        for (int i = 0; i < matrix.length; i++) 
        {
            jumlah += matrix[i][i];
        }
        return jumlah;
    }
}",True,,False,
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;
public class L2 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];
        for (int i = 0; i < 4; i++) 
        {
            for (int j = 0; j < 4; j++)
            {
                m[i][j] = sc.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));
    }

    public static double jumlahDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) 
        { 
            sum += m[i][i];
        }
        return sum;
    }
    
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same approach. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] arr = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = input.nextDouble();
            }
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(arr));
    }

    public static double sumMajorDiagonal(double[][] m) {
        // Menjumlahkan angka yang terdapat di dalam array
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as variable names and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = input.nextDouble();
            }
        }
        
        System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
    }

    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;
        
        for (int i = 0; i < m.length; i++)
            sum += m[i][i];
        
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The only differences are minor formatting changes and the addition of comments and author information in the second sample. These differences are superficial and do not indicate independent development."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];
		//masukan array
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();
		System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(m));
	}
	
	// menambahkan seluruh isi array
	public static double sumMajorDiagonal(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as the class name and some comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class multiarray {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];//inisialisai array 2 dimensi
                                      
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = input.nextDouble();//menginput angka ke dalam array 2d
            }
                          
        }
                                 
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ sumMajorDiagonal(m));//menampilkan fungsi hasil perhitungan diagonal
    }

    public static double sumMajorDiagonal(double[][] m) {//fungsi untuk mengitung diagonal
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as additional comments and slight formatting changes in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];

        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                m[i][j] = input.nextDouble();


        System.out.print(""Sum of the elements in the major diagonal is ""          + sumMajorDiagonal(m));
        }
    //function for Summary
    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;

        for (int i = 0; i < m.length; i++)
            sum += m[i][i];
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The only differences are minor formatting changes and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L1 {

    public static void main(String[] args) {
        //minta input
        Scanner input = new Scanner(System.in);
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];
        //input the matrix
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = input.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));

    }

    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as comments and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in); //harus import dulu
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = input.nextDouble();
            }
        }
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(m));
    }

    //fungsi untuk menjumlahkan diagonal
    public static double sumMajorDiagonal(double[][] m) {
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The differences are minor, such as additional comments and formatting in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] m = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                m[i][j] = input.nextDouble();
            }
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sumMajorDiagonal(m));
    }

    public static double sumMajorDiagonal(double[][] m) {
        // Menjumlahkan angka yang terdapat di dalam array
        double sum = 0;
        for (int i = 0; i < m.length; i++) {
            sum += m[i][i];
        }
        return sum;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4 by 4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same method. The only differences are minor formatting changes and comments in the second sample. These differences are superficial and do not indicate independent development."
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] n = new double[4][4];
        
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                n[i][j] = input.nextDouble();
            }
        }
        
        double sum = 0;
        
        int i=0;
        while(i<n.length){
            sum += n[i][i];
            i++;
        }
            
        
        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples are very similar in terms of structure and logic. Both prompt the user to enter a 4x4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The main difference lies in the method of summing the diagonal elements: the first sample uses a `for` loop within a separate method, while the second sample uses a `while` loop directly in the `main` method. Despite these differences, the core logic and approach are the same, suggesting that one code sample was likely derived from"
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus7 {

    public static void inputMatrix(double[][] matrix, int n) {
        Scanner sc = new Scanner(System.in);
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = sc.nextDouble();
            }
        }
    }
    
    public static double sumMajorDiagonal(double[][] matrix, int n) {
        if(n>=0) {
            return matrix[n][n] + sumMajorDiagonal(matrix, --n);
        }
        else
            return 0;
    }
    
    public static void main(String[] args) {
        
        int n=4;
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        double[][] matrix = new double[n][n];
        
        inputMatrix(matrix, n);
        System.out.println(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(matrix, --n));
    }
}",True,,False,"The two code samples share a similar goal of calculating the sum of the elements in the major diagonal of a 4x4 matrix. However, they differ significantly in their implementation. The first sample uses a straightforward iterative approach within a single method, while the second sample uses a recursive approach and separates the matrix input into a different method. These differences in approach and structure suggest that the code samples were independently developed to solve the same problem."
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

class multiarray
{
		// menambahkan seluruh isi array
	public static double sum(double[][] m)
	{
		double sum = 0;
		for (int i = 0; i < m.length; i++)
			sum += m[i][i];
		return sum;
	}
	
	// 25779F8829AB7A7650E85A4CC871E6AC sangat ganteng
	public static void main(String[] args)
	{
		int i,j;
		
		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] ma = new double[4][4];
		//masukan array
		Scanner input = new Scanner(System.in);
		for (i = 3; i >=0; i--)
			for (j = 3; j >= 0; j--)
				ma[3-i][3-j] = input.nextDouble();
			
					double sum = 1;
		i=1;
		while(i<=ma.length)
		{
			sum += ma[i][i];
			i++;
		}
			

		System.out.print(""Sum of the elements in the major diagonal is ""+ (sum-1));
	}
	

}",True,,False,"The two code samples share a similar goal of summing the elements in the major diagonal of a 4x4 matrix, but they differ significantly in their implementation. The first sample uses nested for-loops to populate the matrix and a separate method to calculate the sum of the major diagonal. The second sample also uses nested loops but in reverse order to populate the matrix and employs a while loop within the main method to calculate the sum. The differences in loop structures, method organization, and the approach to summing the diagonal elements suggest that these code samples were"
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

public class Main {
    static Scanner s = new Scanner(System.in);
    public static void inputData(double[][] mtx){
        int i =0;
        int j=0;
        while(i<4) {
            while(j<4){
                mtx[i][j] = s.nextDouble();
                j++;
            }
			j = 0;
            i++;
        }

    }
    //function for Summary
    public static double sumMajorDiagonal(double[][] mtx) {
        double sum = 0;

        for (int i = 0; i < mtx.length; i=+2)
            sum += mtx[i][i]+mtx[i+1][i+1];
        return sum;
    }

    public static void main(String[] args) {

        double[][] mtx = new double[4][4];

        //input 4*4 matrix data
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        inputData(mtx);

        System.out.print(""Sum of the elements in the major diagonal is ""+ sumMajorDiagonal(mtx));
    }

}",True,,False,"The two code samples share a similar structure and logic for reading a 4x4 matrix and calculating the sum of the elements in the major diagonal. However, there are notable differences in the implementation details. The second sample uses nested `while` loops for input and a different approach to summing the diagonal elements, including an error in the loop increment (`i=+2` instead of `i+=1`). These differences suggest that while the samples solve the same problem, they were likely developed independently with different coding styles and errors."
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        double[][] arr;
        Scanner input = new Scanner(System.in);
        // Input angka ke dalam array n x n pada bagian ini
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        arr = new double[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = input.nextDouble();
            }
        }
        // Menjumlahkan angka yang terdapat di dalam array
        double sum;
        sum = 0;
        for (int i = 0; i < arr.length; i = i + 1) {
            sum += arr[i][i];
        }
        // Menampilkan hasil dari pemanggilan fungsi sumMajorDiagonal
        System.out.print(""Sum of the elements in the major diagonal is ""
                + sum);
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter a 4x4 matrix row by row, store the input in a 2D array, and then calculate the sum of the elements in the major diagonal using the same approach. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 
{
    public static void main(String[] args) 
    {
        Scanner masukkan = new Scanner(System.in);
        double[][] mat = new double[4][4];
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        for (int baris = 0; baris < 4; baris+=1) 
        {
            for (int kolom = 0; kolom < 4; kolom+=1) 
            {
                mat[baris][kolom] = masukkan.nextDouble();
            }
        }
        
        ngitung(mat);
    }

    public static void ngitung(double[][] matriks) 
    {
        double jumlah = 0;
        int i = 3;
        while(i >= 0){
            jumlah += matriks[i][i];
            i--;
        }
        System.out.print(""Sum of the elements in the major diagonal is ""+ jumlah);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The differences in variable names, minor formatting, and the use of different loop constructs (for loop vs. while loop) in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus7L6 {

    public static void main(String[] args) {
        //minta input
        Scanner inp = new Scanner(System.in);
        double[][] matrix = new double[4][4];
        int i = 0;
        double sum = 0;
        System.out.print(""Enter a 4 by 4 matrix row by row: "");

        //input the matrix
        while (i < 4) {
            int j = 0;
            while (j < 4) {
                matrix[i][j] = inp.nextDouble();
                
                if(i == j){
                    sum += matrix[i][j];
                }
                
                j++;
            }
            i++;
        }

        System.out.print(""Sum of the elements in the major diagonal is "" + sum);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The differences in variable names, the use of a while loop instead of a for loop, and the placement of the summation logic within the input loop in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other.

Plag"
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.*;

public class L6 {

    public static double jumlahDiagonal(double[][] m) {
        double sum = 0;
        int hit = m.length-1;

        while (hit >= 0) {
            sum += m[hit][hit];
            hit--;
        }
        return sum;
    }

    public static void print(double[][] m) {
        System.out.print(""Sum of the elements in the major diagonal is "" + jumlahDiagonal(m));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] m = new double[4][4];
        System.out.println(""Enter a 4 by 4 matrix row by row: "");

        for (int i = 3; i >= 0 ; i--) {
            for (int j = 3; j >= 0; j--) {
                m[i][j] = sc.nextDouble();
            }
        }
        print(m);
    }

}",True,,False,"The two code samples share a similar goal of calculating the sum of the elements in the major diagonal of a 4x4 matrix. However, they differ significantly in their implementation details. The first sample uses nested `for` loops to populate the matrix and a `for` loop to sum the diagonal elements. The second sample uses nested `for` loops in reverse order to populate the matrix and a `while` loop to sum the diagonal elements. The differences in loop structures, variable names, and the order of operations suggest that these code samples were independently"
6,7,"import java.util.Scanner;

public class T7 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		System.out.print(""Enter a 4 by 4 matrix row by row: "");
		double[][] m = new double[4][4];

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				m[i][j] = input.nextDouble();

		System.out.print(""Sum of the elements in the major diagonal is "" + sumMajorDiagonal(m));
	}

	public static double sumMajorDiagonal(double[][] m) {
		double sum = 0;

		for (int i = 0; i < m.length; i++)
			sum += m[i][i];

		return sum;
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class arraylebihdarisatu {
   
    public static void main(String[] args) {
        
        
        
        System.out.print(""Enter a 4 by 4 matrix row by row: "");
        
                
       
        
                  
        System.out.print(""Sum of the elements in the major  diagonal is  ""+ HitungDiagonal());//menampilkan fungsi hasil perhitungan diagonal
    }

    public static double HitungDiagonal() {//fungsi untuk mengitung diagonal
        Scanner sc = new Scanner(System.in);
        double hasil=0;
        double[][] matrix = new double[4][4];//inisialisai array 2 dimensi
         for (int x = 0; x < 4; x++) {
            for (int y = 0; y< 4; y++) {
               matrix[x][y] = sc.nextDouble();//menginput angka ke dalam array 2d
               if(x==y)
               {
                  hasil+=matrix[x][y];
               }
            }
                          
        }
        return hasil;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter a 4 by 4 matrix row by row, and then calculate the sum of the elements in the major diagonal. The differences in variable names, method names, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T06 {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int[] a = new int[10];
        for (int i = 0; i < a.length; i++) {
            System.out.print(""Read a number: "");
            a[i] = s.nextInt();
        }
        for (int i = a.length-1; i >= 0 ; i--) {
            System.out.println(a[i]);
        }
        
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are limited to variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;
public class T06
{
   public static void main(String[] args)
   {
      
      Scanner sc = new Scanner(System.in);
      int[] numbers = new int[10];
      for(int i=0;i < 10;i++)
      {
         System.out.print(""Read a number: "");
         numbers[i]= sc.nextInt();
      }
      for(int i=9;i > -1 ;i--)
      {
         System.out.println(numbers[i]);
      }

   }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.util.Scanner;

public class T06 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];
        
        for(int i = 0; i < 10; i++) {
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
        
        for(int i = 9; i >= 0; i--) {
            System.out.println(arr[i]);
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int[] numbers=new int[10];
        for(int i=0;i<10;i++){
            System.out.print(""Read a number: "");
            numbers[i]=sc.nextInt();
        }
        for(int i=9;i>=0;i--){
            System.out.println(numbers[i]);
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in the class names and minor formatting changes, such as the use of `java.util.Scanner` versus `import java.util.Scanner`. These differences are superficial and do not indicate independent development."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/**
 *
 * @author C2FE677A63FFD5B7FFD8FACBF327DAD0
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a[]=new int[10];
        
        for (int i=0;i<10;i++)
        {
            System.out.print(""Read a number: "");
            int number = sc.nextInt();
            a[i]=number;
        }
        
        for (int i=9;i>=0;i--)
        {
            System.out.println(a[i]);
        }


    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
import java.util.Scanner;

public class t06 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arrNum = new int[10];
        for (int i = 0; i < 10; i++) {
            System.out.print(""Read a number: "");
            arrNum[i] = sc.nextInt();
        }
        for (int i = 9; i > -1; i--) {
            System.out.println(arrNum[i]);
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are limited to variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T06 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a[] = new int[10];
        for (int i = 0; i < 10; i++) {
            System.out.print(""Read a number"");
            a[i] = sc.nextInt();
        }
        for (int i = 0; i < 10; i++) {
            System.out.println(a[9-i]);
        }
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T06 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] numbers = new int[10];
        for (int i = 0; i < 10; i++) {
            System.out.print(""Read a number : "");
            numbers[i] = sc.nextInt();
        }
        for (int i = 9; i > -1; i--) {
            System.out.println(numbers[i]);
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are limited to variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;
/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T06 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        int[] arr = new int[10];
        Scanner sc = new Scanner(System.in);
        for(int i=0;i<10;i++){
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
        for(int i=9;i>=0;i--){
            System.out.println(arr[i]);
        }
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T06 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] array = new int[10];
        for (int i = 0; i < array.length; i++) {
            System.out.print(""Read a number: "");
            array[i] = sc.nextInt();
        }

        System.out.println(array[9]);
        System.out.println(array[8]);
        System.out.println(array[7]);
        System.out.println(array[6]);
        System.out.println(array[5]);
        System.out.println(array[4]);
        System.out.println(array[3]);
        System.out.println(array[2]);
        System.out.println(array[1]);
        System.out.println(array[0]);

    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers into an array and then print the numbers in reverse order. The differences in variable names and the use of a loop in the first sample versus individual print statements in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No6 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int[] arr = new int[10];
        Scanner sc = new Scanner(System.in);
        for(int i=0;i<10;i++){
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
        for(int i=9;i>=0;i--){
            System.out.println(arr[i]);
        }
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/**
 *
 * @author 2645BB47F923271FA1FC06C04E9691EA
 */
public class Soal6 {
    public static void reverse(String number){
        
        for(int i = number.length()-1; i>-1; i--){
            System.out.println(number.charAt(i));
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner (System.in);
        String input = """";
        int a;
        for (int i = 0; i < 10; i++) {
            System.out.print(""Read a number: "");
            a = sc.nextInt();
            input+=a;
        }
        reverse(input);
    }
}",False,,False,"The two code samples have different approaches and logic for handling user input and displaying the results. The first sample reads integers into an array and then prints them in reverse order. The second sample reads integers, concatenates them into a string, and then prints the characters of the string in reverse order. The methods and logic used to achieve the final output are different, indicating independent development."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] nums = new int[10];
        
        for (int i = 0; i < 10; i++) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            nums[i] = input.nextInt();
        }
        
        //Display the array
        for (int i = 9; i >= 0; i--) {
            System.out.println(nums[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are minor formatting changes and variable names. These differences are superficial and do not indicate independent development."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	static int[] n = new int[10];
	public static void main (String[] args)
	{
				
		java.util.Scanner inp = new java.util.Scanner(System.in);

		for (int i = 0; i < 10; i++) 
		{
			System.out.print(""Read a number: "");
			n[i] = inp.nextInt();
		}
		for (int a = 9; a >= 0; a--) 
		{
			System.out.println(n[a]);
		}
	}
}",True,,True,"The two code samples exhibit identical logic and structure for reading and displaying an array of integers. Both use a for loop to read 10 integers from the user and store them in an array, and then use another for loop to display the integers in reverse order. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestSatuArray {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];//inisialisasi array
        for (int x = 0; x < 10; x++) {//looping untuk input array
            System.out.print( ""Read a number: "");
            arr[x] = sc.nextInt();//input ke array
        }
        for (int x = 9; x >= 0; x--) {//looping untuk menampilkan array
            System.out.println(arr[x]);//menampilkan array
        }
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading and displaying an array of integers. Both use a for loop to read 10 integers into an array and then another for loop to display the integers in reverse order. The differences in variable names, comments, and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

public class Main {


    public static void main (String[] args) {
        int[] number = new int[10];
     Scanner s = new Scanner(System.in);



        for (int i = 0; i < 10; i++) {

            // Input the number

            System.out.print(""Read a number: "");
            number[i] = s.nextInt();
        }

        // Output the number
        for (int i = 9; i >= 0; i--) {
            System.out.println(number[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are limited to variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L3 {
    public static void main (String[] args) {
        //Delarasi
        int[] arrNum = new int[10];
        Scanner inp = new Scanner(System.in);
        // for untuk 10 kali input
        for (int i = 0; i < 10; i++) {
            // Read a number
            System.out.print(""Read a number: "");
            arrNum[i] = inp.nextInt();
        }
        // Display the array
        for (int i = 9; i >= 0; i--) {
            //Print angka dalam array
            System.out.println(arrNum[i]);
        }
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading 10 integers into an array and then printing them in reverse order. Both use a for loop to read the numbers and another for loop to print them in reverse. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 {

    public static void main(String[] args) {
        java.util.Scanner in = new java.util.Scanner(System.in);
        int[] arrAngka;
        arrAngka = new int[10];
        
        for (int x = 0; x < 10; x++) {
            System.out.print(
                    ""Read a number: "");
            arrAngka[x] = in.nextInt();
        }

        for (int x = 9; x >= 0; x--) {
            System.out.println(arrAngka[x]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;
public class L3 {

    public static void main(String[] args) {
        int[] angka = new int[10];
        Scanner sc = new java.util.Scanner(System.in);
        
        for (int i = 0; i < 10; i++) 
        {

            System.out.print(""Read a number: "");
            angka[i] = sc.nextInt();
        }

        for (int i = 9; i >= 0; i--)
        {
            
            System.out.println(angka[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int[] angka;
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            angka[i] = input.nextInt();
        }
        // Menampilkan array
        for (int i = 9; i >= 0; i--) {
            System.out.println(angka[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static int[] nums;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        nums = new int[10];
        
        for (int i = 0; i < 10; i++) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            nums[i] = input.nextInt();
        }
        
        outputs();
    }
    
    public static void outputs(){
        //Display the array
        for (int i = 9; i >= 0; i--) {
            System.out.println(nums[i]);
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a helper method in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus6 {
    
    public static void simpanArray(int[] arr, int n) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        
        for (int i = 0; i < n; i++) {
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
        
    }
    
    public static void tampilArray(int[] arr, int n) {
        for (int i = n-1 ; i >= 0 ; i--) {
            System.out.println(arr[i]);
        }
    }
    
    public static void main(String[] args) {
        int n=10;
        int[] arr = new int[n];
        simpanArray(arr, n);
        tampilArray(arr, n);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples read 10 integers from the user, store them in an array, and then print the array in reverse order. The differences in method organization and variable names are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	static int[] n = new int[10];
	static void print()
	{
				for (int a = 9; a >= 0; a--) 
		{
			System.out.println(n[a]);
		}
	}
	public static void main (String[] args)
	{
				
		java.util.Scanner inp = new java.util.Scanner(System.in);

		for (int i = 0; i < 10; i++) 
		{
			System.out.print(""Read a number: "");
			n[i] = inp.nextInt();
		}
print();
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class Main {
    public static void printNumber(int[] number){
        for (int i = 9; i >= 0; i--) {
            System.out.println(number[i]);
        }

    }

    public static void main (String[] args) {
        java.util.Scanner s = new java.util.Scanner(System.in);
        int[] number = new int[10];


        for (int i = 0; i < 10; i++) {

            // Input the number

            System.out.print(""Read a number: "");
            number[i] = s.nextInt();
        }

        // Output the number
        printNumber(number);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int[] angka;
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            angka[i] = input.nextInt();
        }
        showArray(angka);
    }
    
    public static void showArray(int[] angka){
         // Menampilkan array
        for (int i = 9; i >= 0; i--) {
            System.out.println(angka[i]);
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then display the numbers in reverse order. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 {

    public static void main(String[] args) {
        proses();
    }
    
    public static void proses(){
        java.util.Scanner in;
        in = new java.util.Scanner(System.in);
        int[] angka;
        angka = new int[10];
        for (int a = 0; a < 10; a++) {
            System.out.print(""Read a number: "");
            angka[a] = in.nextInt();
        }

        for (int b = 9; b >= 0; b--) {
            System.out.println(angka[b]);
        }
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading 10 integers from the user and then printing them in reverse order. Both use a `Scanner` object to read the input, store the integers in an array, and then iterate through the array in reverse order to print the values. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L4 {
    public static void main (String[] args) {
        //Delarasi
        int[] arrNum = new int[10];
        Scanner inp = new Scanner(System.in);
        // for untuk 10 kali input
        for (int i = 0; i < 10; i++) {
            // Read a number
            System.out.print(""Read a number: "");
            arrNum[i] = inp.nextInt();
        }
        // Display the array
        Reverse(arrNum);
    }
    
    private static void Reverse(int[] arr){
        for (int i = 9; i >= 0; i--) {
            //Print angka dalam array
            System.out.println(arr[i]);
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a helper method in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;
public class L4 {
public static void print (int [] arr)
{
    
        for (int i = 9; i >= 0; i--)
        {
            
            System.out.println(arr[i]);
        }
}
    public static void main(String[] args) {
        int[] angka = new int[10];
        Scanner sc = new java.util.Scanner(System.in);
        
        for (int i = 0; i < 10; i++) 
        {

            System.out.print(""Read a number: "");
            angka[i] = sc.nextInt();
        }

       print(angka);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestSatuArray {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];//inisialisasi array
        arr=inputArr(arr);
        printArr(arr);
    }
    
    public static int[] inputArr(int[] arr)
    {
      Scanner sc = new Scanner(System.in);
      for (int x = 0; x < 10; x++) {//looping untuk input array
            System.out.print( ""Read a number: "");
            arr[x] = sc.nextInt();//input ke array
      }
      return arr;
    }
    
    public static void printArr(int[] arr)
    {
         for (int x = 9; x >= 0; x--) {//looping untuk menampilkan array
            System.out.println(arr[x]);//menampilkan array
         }

    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, method organization, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static int[] nums;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        nums = new int[10];
        
        for (int i = 0; i < 10; i++) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            nums[i] = input.nextInt();
        }
        
        outputs();
    }
    
    public static void outputs(){
        //Display the array
        int i = 9;
        while(i >= 0){
            System.out.println(nums[i--]);
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a method in the second sample, and the use of a while loop instead of a for loop for printing are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus6 {
    
    public static void simpanArray(int[] arr, int n) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        
        for (int i = 0; i < n; i++) {
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
    }
    
    public static void tampilArray(int[] arr, int i) {
        System.out.println(arr[i]);
    }
    
    public static void main(String[] args) {
        int n=10;
        int[] arr = new int[n];
        simpanArray(arr, n);
        for (int i = n-1 ; i >= 0 ; i--) {
            tampilArray(arr, i);
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples read 10 integers from the user, store them in an array, and then print the array in reverse order. The differences in method organization and variable names are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	static int[] n = new int[10];
	static void print()
	{
				for (int a = 9; a >= 0; a--) 
		{
			System.out.println(n[a]);
		}
	}
	public static void main (String[] args)
	{
				
		java.util.Scanner inp = new java.util.Scanner(System.in);

		int i=0;
		while (i < 10) 
		{
			System.out.print(""Read a number: "");
			n[i] = inp.nextInt();
			i++;
		}
print();
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a `while` loop instead of a `for` loop for input, and the separation of the print logic into a method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other.

Plagiar"
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class Main {
    public static void printNumber(int[] number){
        for (int i = 9; i >= 0; i--) {
            System.out.println(number[i]);
        }

    }

    public static void main (String[] args) {
        java.util.Scanner s = new java.util.Scanner(System.in);
        int[] number = new int[10];
        int i=0;
        while(i<10){

            // Input the number

            System.out.print(""Read a number: "");
            number[i] = s.nextInt();
            i++;
        }

        // Output the number
        printNumber(number);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a `while` loop instead of a `for` loop for input, and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int[] angka;
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            angka[i] = input.nextInt();
        }
        showArray(angka);
    }
    
    public static void showArray(int[] angka){
         // Menampilkan array
        int i = 9;
        while ( i >= 0) {
            System.out.println(angka[i]);
             i--;
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then display the numbers in reverse order. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); //panggil dari package
        int arrAngka[] = new int[10];

        for (int x = 0; x < 10; x++) {
            System.out.print(""Read a number: "");
            arrAngka[x] = sc.nextInt();
        }

        for (int x = 9; x >= 0; x--)
            System.out.println(arrAngka[x]);
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading 10 integers from the user and then printing them in reverse order. Both use a for loop to read the numbers into an array and another for loop to print the numbers in reverse. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L5 {

    public static void main(String[] args) {
        //Delarasi
        int[] arrNum = new int[10];
        Scanner inp = new Scanner(System.in);
        // for untuk 10 kali input
        int i = 0;
        while(i < 10){
            // Read a number
            System.out.print(""Read a number: "");
            arrNum[i] = inp.nextInt();
            i++;
        }
        // Display the array
        Reverse(arrNum);
    }

    private static void Reverse(int[] arr) {
        int i = 9;
        while (i >= 0) {
            //Print angka dalam array
            System.out.println(arr[i]);
            i--;
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a while loop instead of a for loop, and the separation of the reverse printing logic into a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

public class L5 {

    public static void print(int[] arr) {
        int i = 9;
        while (i >= 0) {

            System.out.println(arr[i]);
            i--;
        }
    }

    public static void main(String[] args) {
        int[] angka = new int[10];
        Scanner sc = new java.util.Scanner(System.in);
        int i = 0;
        while (i != 10) {

            System.out.print(""Read a number: "");
            angka[i] = sc.nextInt();
            i++;
        }

        print(angka);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, the use of a while loop instead of a for loop, and the introduction of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestSatuArray {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];//inisialisasi array
        arr=inputArr(arr);
        printArr(arr);
    }
    
    public static int[] inputArr(int[] arr)
    {
      Scanner sc = new Scanner(System.in);
      int x=0;
      while(x<10) {//looping untuk input array
            System.out.print( ""Read a number: "");
            arr[x] = sc.nextInt();//input ke array
            x++;
      }
      return arr;
    }
    
    public static void printArr(int[] arr)
    {
         int x=9;
         while(x>=0)  {//looping untuk menampilkan array
            System.out.println(arr[x]);//menampilkan array
            x--;
         }

    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples read 10 integers from the user, store them in an array, and then print the array in reverse order. The differences in variable names, the use of helper methods in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] nums = new int[10];
        
        for (int i = 0; i < 10; i++) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            nums[i] = input.nextInt();
        }
        
        //Display the array
        for (int i = 9; i >= 0; i--) {
            System.out.println(nums[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are minor formatting changes and variable names. These differences are superficial and do not indicate independent development."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	public static void main (String[] args)
	{
		java.util.Scanner inp = new java.util.Scanner(System.in);
		int[] n = new int[10];
		for (int i = 0; i < 10; i++) 
		{
			System.out.print(""Read a number: "");
			n[i] = inp.nextInt();
		}
		for (int a = 9; a >= 0; a--) 
		{
			System.out.println(n[a]);
		}
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestSatuArray {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];//inisialisasi array
        for (int x = 0; x < 10; x++) {//looping untuk input array
            System.out.print( ""Read a number: "");
            arr[x] = sc.nextInt();//input ke array
        }
        for (int x = 9; x >= 0; x--) {//looping untuk menampilkan array
            System.out.println(arr[x]);//menampilkan array
        }
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading and displaying an array of integers. Both use a for loop to read 10 integers into an array and then another for loop to display the integers in reverse order. The differences in variable names, comments, and minor formatting are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class Main {

    public static void main (String[] args) {
        java.util.Scanner s = new java.util.Scanner(System.in);
        int[] number = new int[10];


        for (int i = 0; i < 10; i++) {

            // Input the number

            System.out.print(""Read a number: "");
            number[i] = s.nextInt();
        }

        // Output the number
        for (int i = 9; i >= 0; i--) {
            System.out.println(number[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to input 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L2 {
    public static void main (String[] args) {
        //Delarasi
        Scanner inp = new Scanner(System.in);
        int[] arrNum = new int[10];
        // for untuk 10 kali input
        for (int i = 0; i < 10; i++) {
            // Read a number
            System.out.print(""Read a number: "");
            arrNum[i] = inp.nextInt();
        }
        // Display the array
        for (int i = 9; i >= 0; i--) {
            //Print angka dalam array
            System.out.println(arrNum[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are minor, such as variable names and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 {

    public static void main(String[] args) {
        java.util.Scanner masukkan = new java.util.Scanner(System.in);
        int[] number = new int[10];
        
        //masukkan data
        for (int a = 0; a < 10; a++) {
            System.out.print(
                    ""Read a number: "");
            number[a] = masukkan.nextInt();
        }

        //tampilkan ke layar
        for (int a = 9; a >= 0; a--) {
            System.out.println(number[a]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences are limited to variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class L2_6 {

    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int[] angka = new int[10];
        
        for (int i = 0; i < 10; i++) 
        {

            System.out.print(""Read a number: "");
            angka[i] = sc.nextInt();
        }

        for (int i = 9; i >= 0; i--)
        {
            
            System.out.println(angka[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] angka = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            angka[i] = input.nextInt();
        }
        // Menampilkan array
        for (int i = 9; i >= 0; i--) {
            System.out.println(angka[i]);
        }
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reading and displaying an array of integers. Both use a for loop to read 10 integers from the user and store them in an array, and then use another for loop to display the integers in reverse order. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
            java.util.Scanner input = new java.util.Scanner(System.in);
            int[] num = new int[10];
        
        for (int i = 0; i < 10; i++) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            num[i] = input.nextInt();
        }
        
        //Display the array
        for (int i = 9; i >= 0; i--) {
            System.out.println(num[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are minor formatting changes and the addition of a comment block in the second sample. These differences are superficial and do not indicate independent development."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	public static void main (String[] args)
	{
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];
		for (int i = 0; i < 10; i++) 
		{
			System.out.print(
			""Read a number: "");
			num[i] = input.nextInt();
		}
		for (int i = 9; i >= 0; i--) 
		{
			System.out.println(num[i]);
		}
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in the class names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class singlearray {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] num = new int[10];//inisialisasi array
        for (int i = 0; i < 10; i++) {//looping untuk input array
            System.out.print( ""Read a number: "");
            num[i] = input.nextInt();//input ke array
        }
        for (int i = 9; i >= 0; i--) {//looping untuk menampilkan array
            System.out.println(num[i]);//menampilkan array
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then display the numbers in reverse order. The differences are minor, such as the addition of import statements and comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class Main {

    public static void main (String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] num = new int[10];


        for (int i = 0; i < 10; i++) {

            // Input the number

              System.out.print(""Read a number: "");
            num[i] = input.nextInt();
        }

        // Output the number
          for (int i = 9; i >= 0; i--) {
              System.out.println(num[i]);
          }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to input ten numbers, store them in an array, and then print the numbers in reverse order. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L1 {
    public static void main (String[] args) {
        //Delarasi
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] num = new int[10];
        // for untuk 10 kali input
        for (int i = 0; i < 10; i++) {
            // Read a number
            System.out.print(""Read a number: "");
            num[i] = input.nextInt();
        }
        // Display the array
        for (int i = 9; i >= 0; i--) {
            //Print angka dalam array
            System.out.println(num[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are minor formatting changes and comments in the second sample. These differences are superficial and do not indicate independent development."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 
{
    public static void main(String[] args) 
    {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] num = new int[10];
        for (int i = 0; i < 10; i++) 
        {
            System.out.print(
                    ""Read a number: "");
            num[i] = input.nextInt();
        }
        
        //tampilkan ke layar
        for (int i = 9; i >= 0; i--) 
        {
            System.out.println(num[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are minor formatting changes and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int[] num = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            num[i] = input.nextInt();
        }
        // Menampilkan array
        for (int i = 9; i >= 0; i--) {
            System.out.println(num[i]);
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The only differences are in the comments and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static int[] nums;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        nums = new int[10];
        
        for (int i = 10; i >= 0; i--) {
            //Read a number
            System.out.print(
                    ""Read a number: "");
            nums[i] = input.nextInt();
        }
        
        outputs();
    }
    
    public static void outputs(){
        //Display the array
        int i = 9;
        while(i >= 0){
            System.out.println(nums[i--]);
        }
    }
}",True,,False,"The two code samples share a similar goal of reading 10 numbers from the user and then displaying them in reverse order. However, there are significant differences in their implementation. The first sample uses a for loop to read the numbers and another for loop to display them in reverse order. The second sample uses a for loop to read the numbers but incorrectly initializes the loop (it should be `i > 0` instead of `i >= 0`), and it uses a separate method to display the numbers in reverse order using a while loop. The differences in loop structures, method organization, and the incorrect"
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus6 {
    
    public static void simpanArray(int[] arr, int i) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        
        if(i>0) {
            simpanArray(arr, --i);
            System.out.print(""Read a number: "");
            arr[i] = sc.nextInt();
        }
        
    }
    
    public static void tampilArray(int[] arr, int i) {
        if(i>=0){
            System.out.println(arr[i]);
            tampilArray(arr, --i);
        }
    }
    
    public static void main(String[] args) {
        int n=10;
        int[] arr = new int[n];
        simpanArray(arr, n);
        tampilArray(arr, --n);
    }
}",True,,False,"The two code samples exhibit similar functionality but use different approaches to achieve it. Both samples read 10 numbers from the user and then display them in reverse order. However, the first sample uses iterative loops (for loops) for both reading and displaying the numbers, while the second sample uses recursive methods (`simpanArray` and `tampilArray`) for the same tasks. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

class singlearray
{
	static int[] n = new int[10];

	public static void main (String[] args)
	{
				
		java.util.Scanner inp = new java.util.Scanner(System.in);

		int i=9;
		int a=0;
		while (i >=0) 
		{
			System.out.print(""Read a number: "");
			n[a] = inp.nextInt();
			a++;
			i--;
		}
	print();
	}
		static void print()
	{
				for (int a = 0; a <=9; a++) 
		{
			System.out.println(n[9-a]);
		}
	}
}",True,,True,"The two code samples exhibit similar logic and structure for reading and displaying an array of integers in reverse order. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. However, the second sample uses a `while` loop and a separate `print` method, while the first sample uses a `for` loop for both reading and printing. Despite these differences, the core logic and approach are very similar, suggesting that one code sample may have been derived from the other with some modifications."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","public class Main {
    public static void printNumber(int[] number){
        for (int i = 0; i < 10; i++) {
            System.out.println(number[i]);
        }

    }

    public static void main (String[] args) {
        java.util.Scanner s = new java.util.Scanner(System.in);
        int[] number = new int[10];
        int i=9;
        while(i>=0){

            // Input the number

            System.out.print(""Read a number: "");
            number[i] = s.nextInt();
            i--;
        }

        // Output the number
        printNumber(number);
    }
}",True,,False,"The two code samples have different approaches to reading and displaying numbers. The first sample reads numbers in a forward loop and displays them in reverse order, while the second sample reads numbers in reverse order using a while loop and displays them in the same order using a helper method. The differences in loop structures, order of operations, and the use of a helper method in the second sample indicate independent development. The core logic and flow of the program are different, suggesting that the code samples were not derived from each other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int[] angka;
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = new int[10];
        for (int i = 0; i < 10; i++) {
            // Input angka pada bagian ini
            System.out.print(
                    ""Read a number: "");
            angka[i] = input.nextInt();
        }
        showArray(angka);
    }
    
    public static void showArray(int[] angka){
         // Menampilkan array
        int i = 0;
        while ( i <= 9) {
            System.out.println(angka[i]);
             i++;
        }
    }
}",True,,False,"The two code samples share some similarities, such as reading 10 integers from the user and storing them in an array. However, the second sample includes additional functionality by using a separate method (`showArray`) to display the array elements, and it uses a `while` loop instead of a `for` loop for displaying the elements. The differences in method organization, loop structure, and the way the array is displayed suggest that these code samples were independently developed to solve a similar problem, rather than one being copied from the other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 
{
    static Scanner sc = new Scanner(System.in);
    
    public static void tampil(int[]angka){
        for (int x = 10; x > 0; x--)
            System.out.println(angka[x]);
    }
    
    public static void main(String[] args) 
    {
        int arrAngka[] = new int[10];

        for (int x = 0; x < arrAngka.length; x++) 
        {
            System.out.print(""Read a number: "");
            arrAngka[x] = sc.nextInt();
        }

        tampil(arrAngka);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, method organization, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus6L6 {
    
    public static void main(String[] args) {
        //Delarasi
        int[] arrNum = new int[10];
        Scanner inp = new Scanner(System.in);
        // for untuk 10 kali input
        int i = 9;
        while(i >= 0){
            // Read a number
            System.out.print(""Read a number: "");
            arrNum[i] = inp.nextInt();
            i--;
        }
        
        // Display the array
        Reverse(arrNum);
    }

    private static void Reverse(int[] arr) {
        int i = 0;
        while (i < 10) {
            //Print angka dalam array
            System.out.println(arr[i]);
            i++;
        }
    }
}",True,,False,"The two code samples exhibit significant differences in their structure and logic. The first sample uses a for loop to read numbers into an array and then another for loop to print the array in reverse order. The second sample uses a while loop to read numbers into an array in reverse order and then calls a separate method to print the array in the original order. The differences in loop structures, method organization, and the order of operations suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.*;

public class L6 {

    public static void print(int[] arr) {
        int i = 9;
        int j = 0;
        while (j < 10) {

            System.out.println(arr[i]);
            i--;
            j++;
        }
    }

    public static void main(String[] args) {
        int[] angka = new int[10];
        Scanner sc = new java.util.Scanner(System.in);
        int i = 0;
        while (i != 10) {

            System.out.print(""Read a number: "");
            angka[i] = sc.nextInt();
            i++;
        }

        print(angka);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter 10 numbers, store them in an array, and then print the numbers in reverse order. The differences in variable names, loop structures, and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,6,"public class T6 {
	public static void main(String[] args) {
		java.util.Scanner input = new java.util.Scanner(System.in);
		int[] num = new int[10];

		for (int i = 0; i < 10; i++) {
			// Read a number
			System.out.print(""Read a number: "");

			num[i] = input.nextInt();
		}

		// Display the array
		for (int i = 9; i >= 0; i--) {
			System.out.println(num[i]);
		}
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TestSatuArray {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[10];//inisialisasi array
        
        printArr(inputArr(arr));
    }
    
    public static int[] inputArr(int[] arr)
    {
      Scanner sc = new Scanner(System.in);
      int x=0;
      int[] arr2=new int [10];
      while(x<10) {//looping untuk input array
            System.out.print( ""Read a number: "");
            arr[x] = sc.nextInt();//input ke array
            x++;
      }
      x=9;
      for(int i=0;i<10;i++){
         arr2[i]=arr[x];
         x--;
      }
      return arr2;
    }
    
    public static void printArr(int[] arr)
    {
         int x=0;
         while(x<10)  {//looping untuk menampilkan array
            System.out.println(arr[x]);//menampilkan array
            x++;
         }

    }
}",True,,False,"The two code samples share a similar goal of reading 10 integers from the user and then displaying them in reverse order. However, the implementation details differ significantly. The first sample uses a single class and two loops within the `main` method to achieve this, while the second sample splits the functionality into multiple methods (`inputArr` and `printArr`). Additionally, the second sample uses a temporary array to store the reversed numbers before printing them. These differences in structure and approach suggest that the code samples were independently developed to solve the same problem."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T01 {
    public static void main(String[] args) {
        for (int i=0;i<5;i++){
            System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class T01
{
   public static void main(String[] args)
   {
      for(int i=0;i < 5;i++)
      {
         System.out.println(""Welcome To Java"");
      }
      
   }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

public class T01 {
    public static void main(String[] args) {
        for(int i = 0; i < 5; i++) {
            System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class Main {

    public static void main(String[] args) {
	    for(int i=0;i<5;i++){
	        System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/**
 *
 * @author 672CAF27F5363DC833BDA5099775E891
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        String a = ""Welcome To Java"";
        for(int i=0;i<6;i++)
        {
            System.out.println(a);
        }
        
    }
    
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" multiple times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement six times. The difference in approach and the number of repetitions suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
public class t01 {

    public static void main(String[] args) {
        for (int i = 0; i < 5; i++) {
            System.out.println(""Welcome To Java"");
        }

    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T01 {
    public static void main(String[] args) {
        for (int i = 0; i < 5; i++) {
            System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T01 {
    public static void main(String[] args) {
        for (int i = 0; i < 5; i++) {
            System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T01 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        for(int i=0;i<5;i++)
            System.out.println(""Welcome To Java"");
    }
    
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T01 {

    public static void main(String[] args) {
        for (int i = 0; i < 5; i++) {
            System.out.println(""Welcome To Java"");
        }
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        System.out.println(""Welcome To Java"");
        System.out.println(""Welcome To Java"");
        System.out.println(""Welcome To Java"");
        System.out.println(""Welcome To Java"");
        System.out.println(""Welcome To Java"");
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the presence of comments and author information in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
0,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 4900D0A19B6894A4A514E9FF3AFCC2C0
 */
public class Soal1 {
    public static void main(String[] args) {
        for(int i = 0; i<5; i++)    
            System.out.println(""Welcome to Java"");
        
    }
}",False,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","class HelloWorld
{
	public static void main(String[] args)
	{
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		
		//End of code
		// 25779F8829AB7A7650E85A4CC871E6AC Ganteng
		
	}
	
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class hellow {
    public static void main(String[] args) {
        System.out.println(""Welcome to Java""); //ini buat ngeprint
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi lagi
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the addition of comments in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus1L3 {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //Print Welcome to java 5 kali
		String teks = ""Welcome to Java"";
        System.out.println(teks);
        System.out.println(teks);
        System.out.println(teks);
        System.out.println(teks);
        System.out.println(teks);
    }
    
}",True,,True,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements directly within the `main` method, while the second sample stores the string in a variable `teks` and then prints it five times using `System.out.println(teks)`. Despite the minor difference in storing the string in a variable, the overall structure and logic are nearly identical. However, the difference in the approach of storing the string in a variable suggests a slight variation in implementation, which could indicate independent development to"
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class L3 {
    public static void main(String[] args) {
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in every aspect, including the class structure, method, and the repeated print statements. There are no differences in logic, structure, or implementation, which strongly indicates that one code sample was copied directly from the other without any modifications."
3,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 //class
{
    public static void main(String[] args) //main method
    {
        System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
        cetak();
    }
    public static void cetak(){
        System.out.println(""Welcome to Java""); 
        System.out.println(""Welcome to Java""); 
        System.out.println(""Welcome to Java""); 
        System.out.println(""Welcome to Java""); 
        System.out.println(""Welcome to Java"");
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample directly prints the statement five times within the `main` method, while the second sample encapsulates the print statements within a separate method `cetak` and calls this method from the `main` method. The difference in approach and method organization suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","class HelloWorld
{
	static String s;
	static void Cetak()
	{
		System.out.println(s);
		
		System.out.println(s);
		System.out.println(s);
		
		System.out.println(s);
		
		System.out.println(s);
	}
	public static void main(String[] args)
	{
		s = ""Welcome to Java"";
		// code to print ""Welcome to Java""
		Cetak();
		
		//End of code
		// 25779F8829AB7A7650E85A4CC871E6AC Ganteng
		
	}
	
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a method `Cetak` to print the statement five times. The second sample also includes additional class-level variables and a different class structure. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class hellow {

    public static void main(String[] args) {
        printHello();

    }

    private static void printHello() {
        System.out.println(""Welcome to Java""); //ini buat ngeprint
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi lagi
    }

}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements within the `main` method, while the second sample encapsulates the print statements within a separate method `printHello` and calls this method from the `main` method. Additionally, the second sample includes comments for each print statement. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the"
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class Main {
    public static void printOut(){
        System.out.println(""Welcome to Java"");
    }

    public static void main(String[] args) {
        //print 5x ""Welcome To Java""
        printOut();
        printOut();
        printOut();
        printOut();
        printOut();
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a helper method `printOut()` to encapsulate the print statement and then calls this method five times in the `main` method. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class L4 {

    public static void print() {
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
    }

    public static void main(String[] args) {
        
        print();
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample directly prints the statements within the `main` method, while the second sample encapsulates the print statements within a separate `print` method and then calls this method from the `main` method. Despite the different organization, the core logic and output are identical. However, the use of a separate method in the second sample indicates a different approach to structuring the code, suggesting that the second sample was not directly copied from"
4,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 {

    public static void main(String[] args) {
        String kal = ""Welcome to Java"";
        tampil(kal);
    }

    //fungsi menampilkan kalimat
    private static void tampil(String kalimat) {
        System.out.println(kalimat);
        System.out.println(kalimat);
        System.out.println(kalimat);
        System.out.println(kalimat);
        System.out.println(kalimat);
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements directly in the `main` method, while the second sample uses a helper method `tampil` to print the statement five times. The difference in approach and the use of a helper method in the second sample suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class WelcomeToJava {
    public static void test(int i) {
        while(i>0) {
            System.out.println(""Welcome To Java"");
            i--;
        }
    }
    
    public static void main(String[] args) {
        test(5);
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `while` loop within a method to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class hellow {

    public static void main(String[] args) {
        printHello();

    }

    private static void printHello() {
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi lagi lagi
    }

}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements within the `main` method, while the second sample uses a separate method `printHello` to print the statement five times with `System.out.print` and newline characters. The second sample also includes comments and a different class name. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class PrintJava {

    public static void main(String[] args) {
        printAll();
    }

    public static void printAll() {
        //mencetak welcome to java sebanyak 5 kali
        for (int i = 0; i < 5; i++) {
            System.out.print(""Welcome to Java"");
            System.out.println("""");
        }
    }

}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop within a helper method `printAll` to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
        cetak();
    }
    public static void cetak(){
        for (int i = 0; i < 5; i++) {
            System.out.println(""Welcome to Java""); 
            
        }
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a method `cetak()` with a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class L5 {

    public static void print() {

        for (int i = 0; i < 5; i++) {
            System.out.print(""Welcome to Java\n"");
        }
    }

    public static void main(String[] args) {
        print();
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop within a helper method to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
2,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class WelcomeToJava {
    public static void main(String[] args) {
		{
            System.out.println(""Welcome To Java"");
			System.out.println(""Welcome To Java"");
			System.out.println(""Welcome To Java"");
			System.out.println(""Welcome To Java"");
			System.out.println(""Welcome To Java"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are in the class names and the presence of additional comments and braces in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class hellow {
    public static void main(String[] args) {
        System.out.println(""Welcome to Java""); //ini buat ngeprint
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi lagi
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the addition of comments in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class PrintJava {
    public static void main(String[] args) {
            //mencetak welcome to java sebanyak 5 kali
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using five separate `System.out.println` statements. The only differences are in the class names and the presence of comments and author information in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
2,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
2,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author 19984DCAEA13176BBB694F62BA6B5B35
 */
public class L2 {
     public static void main(String[] args) {
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in every aspect, including the class structure, method, and the repeated print statements. There are no differences in logic, structure, or implementation, which strongly indicates that one code sample was copied directly from the other without any modifications."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java""); 
            System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}",True,,True,"The two code samples are identical in every aspect, including the class name, method, and the repeated print statements. There are no differences in logic, structure, or implementation, which strongly indicates that one code sample was copied directly from the other without any modifications."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","class HelloWorld
{
	public static void main(String[] args)
	{
		
		// code to print ""Welcome to Java""
		System.out.println(""Welcome to Java"");
		
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		
		System.out.println(""Welcome to Java"");
		
		System.out.println(""Welcome to Java"");
		
		//End of code
		// 25779F8829AB7A7650E85A4CC871E6AC Ganteng
		
	}
	
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class Main {

    public static void main(String[] args) {
        //print ""Welcome To Java""

    System.out.println(""Welcome to Java"");
    System.out.println(""Welcome to Java"");
    System.out.println(""Welcome to Java"");
    System.out.println(""Welcome to Java"");
    System.out.println(""Welcome to Java"");

    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only difference is the class name and a comment in the second sample, which are superficial and do not indicate independent development. The identical logic and output strongly suggest that one code sample was copied directly from the other."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
            //mencetak welcome to java sebanyak 5 kali
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
            System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using five separate `System.out.println` statements. The only differences are in the class names and the presence of comments and author information in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 {

    public static void main(String[] args)
    {
        //menampilkan sesuatu ke layar
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using five separate `System.out.println` statements. The only differences are the comments and the class names, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus1L1 {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //Print Welcome to java 5 kali
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
        System.out.println(""Welcome to Java"");
    }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using five separate `System.out.println` statements. The only differences are in the class names and the presence of comments and author information in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class HelloWorld {
    public static void main(String[] args) {
        System.out.println(""Welcome to Java""); //ini buat ngeprint
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi
        System.out.println(""Welcome to Java""); //ini buat ngeprint lagi lagi lagi lagi
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples print ""Welcome to Java"" five times using separate `System.out.println` statements. The only differences are the class names and the addition of comments in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) { 
        cetak();
    }
    public static void cetak(){
        for (int i = 5; i > -1; i--) {
            System.out.println(""Welcome to Java""); 
            
        }
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a method `cetak()` with a `for` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class WelcomeToJava {
    public static String test(int i) {
        if(i>0) {
            System.out.println(""Welcome To Java"");
            return test(--i);
        }
        else
            return """";
    }
    
    public static void main(String[] args) {
        int i=5;
        test(i);
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a recursive method to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","class HelloWorld
{
	static String s;
	static void Cetak()
	{
		for(int a=5;a>0;a--)
		System.out.println(s);

	}
	public static void main(String[] args)
	{
		s = ""Welcome to Java"";
		// code to print ""Welcome to Java""
		Cetak();
		
		//End of code
		// 25779F8829AB7A7650E85A4CC871E6AC Ganteng
		
	}
	
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop within a method to print the statement five times. The second sample also includes additional class-level variables and methods, which indicate a different approach to solving the problem. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class Main {

    public static void main(String[] args) {
	//print ""welcome to java"" 5x
    String java=""Welcome To Java"";
for(int baris=9;baris>=0;baris-=2){
    System.out.print(java);
    System.out.println();
}
    }
}",True,,False,"The two code samples aim to print ""Welcome to Java"" multiple times, but they use different approaches and logic. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop with a decrementing counter to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class PrintJava {

    public static void main(String[] args) {
        printAll();
    }

    public static void printAll() {
        //mencetak welcome to java sebanyak 5 kali
        for (int i = 5; i > 0; i--) {
            System.out.print(""Welcome to Java"");
            System.out.println("""");
        }
    }

}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop within a separate method `printAll` to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 
{
    public static void main(String[] args) 
    {
        String input = ""Welcome to Java\n"";
        keluaran(input);
    }
    
    private static void keluaran(String kal) 
    {
        int limit=0; //batas perulangan
        while(limit!=5) //perulangan sebanyak 5x
        {
            System.out.print(kal);
            limit++;
        }
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `while` loop within a helper method to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus1L6 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //Print Welcome to java 5 kali
        cetakTeks(""Welcome to Java"");
    }

    private static void cetakTeks(String teks) {
        int i = 5;
        while(i > 0){
            System.out.println(teks);
            i--;
        }
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a helper method `cetakTeks` with a `while` loop to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class L6 {

    public static void print() {

        for (int i = 5; i > 0; i--) {
            System.out.print(""Welcome to Java\n"");
        }
    }

    public static void main(String[] args) {
        print();
    }
}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements, while the second sample uses a `for` loop within a separate method to print the statement five times. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,1,"public class T1 {
	public static void main(String[] args) {
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
		System.out.println(""Welcome to Java"");
	}

}","public class hellow {

    public static void main(String[] args) {
        printHello();

    }

    private static void printHello() {
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi lagi
        System.out.print(""Welcome to Java \n""); //ini buat ngeprint lagi lagi lagi lagi
    }

}",True,,False,"The two code samples achieve the same output of printing ""Welcome to Java"" five times, but they use different approaches. The first sample uses five separate `System.out.println` statements within the `main` method, while the second sample uses a separate method `printHello` to print the statement five times with `System.out.print` and newline characters. The second sample also includes comments and a different class name. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T04 {
    public static void main(String[] args) {
        System.out.println(""Miles           Kilometers"");
        for (int i = 1; i < 10; i++) {
            System.out.println(i+""               ""+i*1.609);
        }
        System.out.println(10+""              ""+10*1.609);
    }
}",False,,False,"The two code samples achieve the same output of converting miles to kilometers and printing the results, but they use different approaches. The first sample uses a `while` loop to iterate from 1 to 10, while the second sample uses a `for` loop to achieve the same result. The formatting of the output is slightly different, and the second sample includes a license header comment. These differences in approach and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other.

Plagiar"
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;
public class T04
{
   public static void main(String[] args)
   {
      System.out.println(""Miles       Kilometers"");

      for(int i=1;i < 11;i++)
      {
         if(i < 10)
         {
            System.out.println(i+""           ""+i*1609);
         }
         else
         {
            System.out.println(i+""          ""+i*1609);
         }
      }

   }
}",False,,False,"The two code samples aim to achieve the same goal of converting miles to kilometers and printing the results. However, they use different approaches and structures. The first sample uses a `while` loop and a conversion factor of 1.609, while the second sample uses a `for` loop and a conversion factor of 1609 (which seems to be a mistake, as it should be 1.609). The differences in loop structure, conversion factor, and formatting indicate that these code samples were independently developed to solve the same problem, rather than"
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.text.DecimalFormat;

public class T04 {
    public static void main(String[] args) {
        DecimalFormat d = new DecimalFormat(""0.000"");
        
        System.out.println(""Miles\tKilometers"");
        for(int i = 1; i <= 10; i++) {
            System.out.println(i + ""\t"" + d.format(i * 1.609));
        }
    }
}",False,,False,"The two code samples produce the same output of converting miles to kilometers for values from 1 to 10. However, they use different approaches and formatting. The first sample uses a `while` loop and prints the results directly, while the second sample uses a `for` loop and formats the output using `DecimalFormat`. The differences in loop structure, formatting, and the use of an external library for formatting suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {

    public static void main(String[] args) {
        System.out.println(""Miles    Kilometers"");
        for(int i=1;i<=10;i++){
            System.out.println(i+""        ""+i*1609);
        }
    }
}",False,,False,"The two code samples aim to achieve the same goal of converting miles to kilometers and printing the results. However, they use different approaches and have significant differences in implementation. The first sample uses a `while` loop and prints the results with specific formatting, while the second sample uses a `for` loop and a different conversion factor (1609 instead of 1.609). These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author C2FE677A63FFD5B7FFD8FACBF327DAD0
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        int miles = 1;
        System.out.print(""Miles    Kilometer"");
        for(int i=0;i<10;i++)
        {
            double kilo = miles*1.609;
            System.out.println("""");
            System.out.print(miles+""        ""+kilo);
            miles++;

        }
        
    }
    
}",False,,False,"The two code samples achieve the same goal of converting miles to kilometers and printing the results, but they use different approaches. The first sample uses a `while` loop and prints the results in a tabular format with headers, while the second sample uses a `for` loop and prints the results without headers. The differences in loop structure, formatting, and the presence of comments and author information in the second sample suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
public class t04 {

    public static void main(String[] args) {
        System.out.println(""Miles\tKilometers"");
        for (int i = 1; i < 11; i++) {
            System.out.println(i + ""\t"" + i * 1.609);
        }
    }
}",False,,False,"The two code samples achieve the same output of converting miles to kilometers and printing the results in a tabular format. However, they use different approaches to achieve this. The first sample uses a `while` loop, while the second sample uses a `for` loop. Additionally, there are differences in formatting, such as the number of tabs between ""Miles"" and ""Kilometers"" and the range of the loop. These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T04 {
    public static void main(String[] args) {
        System.out.println(""miles \t kilometers"");
        for (int i = 0; i < 10; i++) {
            System.out.println(i+1+""\t""+((i+1)*1.609));
        }
    }
}",False,,False,"The two code samples achieve the same output of converting miles to kilometers for values from 1 to 10, but they use different approaches. The first sample uses a `while` loop, while the second sample uses a `for` loop. Additionally, the formatting of the output is slightly different, with the first sample using tab characters and the second sample using spaces. These differences in approach and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T04 {
    public static void main(String[] args) {
        double kilo;
        double milToKilo = 1.609;
        System.out.println(""Miles\tKilometers"");
        for (int i = 1; i < 11; i++) {
            kilo = i * milToKilo;
            System.out.println(i + ""\t"" + kilo);
        }
    }
}",False,,False,"The two code samples achieve the same output of converting miles to kilometers and printing the results in a tabular format. However, they use different approaches to accomplish this. The first sample uses a `while` loop, while the second sample uses a `for` loop. Additionally, the second sample includes a conversion factor variable (`milToKilo`) and a different method of formatting the output. These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T04 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        int mil = 1609;
        System.out.println(""Miles\tKilometers"");
        for(int i=1;i<=10;i++){
            System.out.println(i + ""\t"" + i*mil);
        }
    }
    
}",False,,False,
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.text.DecimalFormat;
import java.text.NumberFormat;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T04 {

    public static void main(String[] args) {
        NumberFormat formatter = new DecimalFormat(""#0"");
        System.out.println(""Miles"" + ""\t"" + ""Kilometers"");
        System.out.println(""1"" + ""\t"" + (1 * 1.609));
        System.out.println(""2"" + ""\t"" + (2 * 1.609));
        System.out.println(""3"" + ""\t"" + (3 * 1.609));
        System.out.println(""4"" + ""\t"" + (4 * 1.609));
        System.out.println(""5"" + ""\t"" + (5 * 1.609));
        System.out.println(""6"" + ""\t"" + (6 * 1.609));
        System.out.println(""7"" + ""\t"" + (7 * 1.609));
        System.out.println(""8"" + ""\t"" + (8 * 1.609));
        System.out.println(""9"" + ""\t"" + (9 * 1.609));
        System.out.println(""10"" + ""\t"" + (10 * 1.609) + formatter.format(0.0));
    }
}",False,,False,"The two code samples aim to achieve the same goal of converting miles to kilometers and printing the results. However, they use different approaches and formatting techniques. The first sample uses a while loop to iterate from 1 to 10, while the second sample uses individual print statements for each mile value. Additionally, the second sample includes the use of `NumberFormat` and `DecimalFormat` for formatting, which is not present in the first sample. These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem."
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author Elvark
 */
public class No4 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        int mil = 1609;
        System.out.println(""Miles\tKilometers"");
        for(int i=1;i<=10;i++){
            System.out.println(i + ""\t"" + i*mil);
    }
    }
    
}",False,,False,"The two code samples have different approaches to solving the problem. The first sample uses a `while` loop to iterate from 1 to 10, converting miles to kilometers using the conversion factor 1.609 and printing the results. The second sample uses a `for` loop to iterate from 1 to 10, but it incorrectly uses a conversion factor of 1609 instead of 1.609. Additionally, the formatting of the output is different, and the second sample includes comments and author information. These differences in logic, implementation,"
0,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.text.DecimalFormat;

/**
 *
 * @author 4900D0A19B6894A4A514E9FF3AFCC2C0
 */
public class Soal4 {
    public static void main(String[] args) {
        int arr[][] = new int[11][2];
        DecimalFormat df = new DecimalFormat(""#.###"");
        for(int i = 0; i<11; i++){
            if(i==0)
                System.out.println(""Miles \t Kilometers"");
            else
                System.out.println(i + ""\t"" + df.format(i*1.609));
        }
    }
}",False,,False,"The two code samples produce similar output, converting miles to kilometers and displaying the results in a tabular format. However, the implementation details are significantly different. The first sample uses a `while` loop and directly prints the results, while the second sample uses a `for` loop, an array, and a `DecimalFormat` object to format the output. The differences in approach, structure, and specific implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        int mile = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        
        //Use while loop
        while (mile <= 10) {
                System.out.println(mile + ""\t\t"" + mile * 1.609);
                mile++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static void Konversi(int n) {
        int miles = 1;
        while (miles <= n) {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            miles++;
        }
    }
    
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        Konversi(10);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples print a table converting miles to kilometers, using the same conversion factor (1.609) and iterating from 1 to 10. The differences in method organization and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		int m = 1;
		// print seusatu
	System.out.println(""Miles\t\tKilometers"");
	System.out.println(""-------------------------------"");
	// pake pengulangan while
		
		while (m <= 10) {
		System.out.println(m + ""\t\t"" + m * 1.609);
		m++;
		//ditambahin iteratornya
		}
	}
}",True,,True,"The two code samples are very similar in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The differences are mainly in the class names, comments, and minor formatting, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {

    public static void main(String[] args) {
        //declare MIL
        int mil=1;
        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
        while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);


            mil++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int jarak;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        jarak = 1;
        while (jarak <= 10) {
            // Print hasil di sini sebanyak 10 kali
            System.out.println(jarak + ""\t\t"" + jarak * 1.609);
            jarak++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and some comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 {

    public static void main(String[] args) {
        //inisialisasi
        int mile = 1;
        
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        while (mile <= 10) {
            System.out.println(mile + ""\t\t"" + mile * 1.609);
            mile++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L3 {
    public static void main(String[] args) {
        int counter = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        while (counter <= 10) {
            //Menampilkan hasil
            //counter = miles
            System.out.println(counter + ""\t\t"" + counter * 1.609);
            counter++;
        }
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The differences are mainly in variable names and comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class L3 {

    public static void main(String[] args) {
        int mil = 0 ;
        System.out.println(""Miles\t\tKilometers"");
        
        System.out.println(""-------------------------------"");

        mil = 1;

        while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;

        }

    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and a minor initialization difference for the `mil` variable, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
3,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class looping {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        int mil ;
        mil= 1;//inisialisasi while pertama kali
        while (mil <= 10) {
            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;
        }//looping dari 1 sampai 10
   }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int mile;
    public static void main(String[] args) {
        mile = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        loops();
    }
    
    public static void loops(){
        //Use while loop
        while (mile <= 10) {
                System.out.println(mile + ""\t\t"" + mile * 1.609);
                mile++;
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples print a table converting miles to kilometers using the same conversion factor (1.609) and iterate from 1 to 10. The differences in the organization of the code, such as the use of a separate method for the loop in the second sample, are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static void Konversi(int miles) {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
    }
    
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        for(int miles=1 ; miles<=10 ; miles++)
            Konversi(miles);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples aim to convert miles to kilometers and print the results in a tabular format. They both iterate from 1 to 10 and use the same conversion factor (1.609). The differences lie in the use of a `while` loop in the first sample and a `for` loop with a helper method in the second sample. Despite these differences, the core logic and output are identical, suggesting that one sample was likely derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	static void hitHasil(int m)
	{
		while (m <= 10) 
		{
		System.out.println(m + ""\t\t"" + m * 1.609);
		m++;
		//ditambahin iteratornya
		}
	}
	public static void main(String[] args) 
	{
		int m = 1;
		// print seusatu
	System.out.println(""Miles\t\tKilometers"");
	System.out.println(""-------------------------------"");
	// pake pengulangan while
		hitHasil(m);
		
	}
}",True,,True,"These code samples exhibit significant similarities in their logic and output formatting. Both samples convert miles to kilometers using the same conversion factor (1.609) and print the results in a tabular format. The differences in method organization, variable names, and comments are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {
    public static void printMil (int mil){
        while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);


            mil++;
        }
    }
    public static void main(String[] args) {
        //declare MIL
        int mil=1;
        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
        printMil(mil);
    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int jarak;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        jarak = 1;
        printJarakDalamMilDanKilo(jarak);
        
    }
   
    public static void printJarakDalamMilDanKilo(int jarak){
        while (jarak <= 10) {
            // Print hasil di sini sebanyak 10 kali
            System.out.println(jarak + ""\t\t"" + jarak * 1.609);
            jarak++;
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples print a table converting miles to kilometers, using the same conversion factor (1.609) and iterating from 1 to 10. The differences in variable names, comments, and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 
{

    public static void main(String[] args) 
    {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        tabelKonversi();
    }

    private static void tabelKonversi() 
    {
        int mil = 1;
        while (mil <= 10) 
        {
            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;
        }
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the use of a separate method (`tabelKonversi`) in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other"
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L4 {
    public static void main(String[] args) {
        int counter = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        while (counter <= 10) {
            //Menampilkan hasil
            //counter = miles
            System.out.println(counter + ""\t\t"" + ConvertMilesToKilo(counter));
            counter++;
        }
    }
    
    private static double ConvertMilesToKilo(int miles){
        return miles * 1.609;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples print a table converting miles to kilometers for values from 1 to 10, using the same conversion factor (1.609). The differences in variable names, the use of a helper method in the second sample, and the addition of comments are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class L4 {

    public static void print(int mil)
    {
          while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;

        }
    }
    public static void main(String[] args) {
        
        int mil = 1 ;
        System.out.println(""Miles\t\tKilometers"");
        
        System.out.println(""-------------------------------"");

        print(mil);

    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
4,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class looping {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        int mil ;
        print(mil=1);
   }
   
   public static void print(int mil)
   {
       while (mil <= 10) {
            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;
        }//looping dari 1 sampai 10

   }
}",True,,False,
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int mile;
    public static void main(String[] args) {
        mile = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        loops();
    }
    
    public static void loops(){
        //Use while loop
        for (int i = 1; i <= 10; i++) {
            System.out.println(mile + ""\t\t"" + mile * 1.609);
                mile++;
            
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are differences in the loop structure (one uses a `while` loop and the other uses a `for` loop) and method organization, the core implementation and output are too similar to be coincidental. The differences in loop structure and method organization are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static double Konversi(int miles) {
            return miles * 1.609;
    }
    
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        for(int miles=1 ; miles<=10 ; miles++)
            System.out.println(miles + ""\t\t"" + Konversi(miles));
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples aim to convert miles to kilometers and print the results in a tabular format. They both iterate from 1 to 10 and use the same conversion factor (1.609). The differences lie in the use of a helper method `Konversi` in the second sample and the use of a `for` loop instead of a `while` loop. However, these differences are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the"
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	static void hitHasil(int m)
	{
		for(int a=m;a<=10;a++)
		{
		System.out.println(a + ""\t\t"" + a * 1.609);
		//ditambahin iteratornya
		}
	}
	public static void main(String[] args) 
	{
		int m = 1;
		// print seusatu
	System.out.println(""Miles\t\tKilometers"");
	System.out.println(""-------------------------------"");
	// pake pengulangan while
		hitHasil(m);
		
	}
}",True,,True,"These code samples exhibit significant similarities in their output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are differences in loop structure, method organization, and some added comments, the core implementation and output are too similar to be coincidental. The differences are mostly superficial and do not indicate independent development, strongly suggesting that one was derived from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {
    public static void printMil (int mil){

            for(int i =1;i<=10;i++){
            System.out.println(mil + ""\t\t"" + mil * 1.609);


            mil++;
        }
    }
    public static void main(String[] args) {
        //declare MIL
        int mil=1;
        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
        printMil(mil);
    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int jarak;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        jarak = 1;
        printJarakDalamMilDanKilo(jarak);
        
    }
   
    public static void printJarakDalamMilDanKilo(int jarak){
        for(jarak = jarak; jarak <= 10; jarak++){
            // Print hasil di sini sebanyak 10 kali
            System.out.println(jarak + ""\t\t"" + jarak * 1.609);
        }
    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        convert();
    }

    //pakai for
    private static void convert() {
        for(int mill = 1; mill <=10; mill++)
            System.out.println(mill + ""\t\t"" + mill * 1.609);
    }
}",True,,False,"The two code samples produce the same output and use the same conversion factor (1.609) to convert miles to kilometers. However, they use different looping constructs and organizational structures. The first sample uses a `while` loop directly in the `main` method, while the second sample uses a `for` loop within a separate `convert` method. These differences in approach and structure suggest that the code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L5 {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use for loop
        for (int i = 1; i <= 10; i++) {
            //Menampilkan hasil
            //i = miles
            System.out.println(i + ""\t\t"" + ConvertMilesToKilo(i));
        }
    }

    private static double ConvertMilesToKilo(int miles) {
        return miles * 1.609;
    }
}",True,,False,"The two code samples achieve the same output of converting miles to kilometers and printing the results in a tabular format. However, they use different approaches: the first sample uses a `while` loop, while the second sample uses a `for` loop and a helper method `ConvertMilesToKilo` for the conversion. The difference in loop structure and the use of a helper method in the second sample suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class L5 {

    public static void print(int mil)
    {
          for ( int i = 0 ; i < 10 ; i ++){

            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;

        }
    }
    public static void main(String[] args) {
        
        int mil = 1 ;
        System.out.println(""Miles\t\tKilometers"");
        
        System.out.println(""-------------------------------"");

        print(mil);

    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
5,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class looping {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        int mil ;
        print(mil=1);
   }
   
   public static void print(int mil)
   {
       for(int i=mil;i<=10;i++) {
            System.out.println(i + ""\t\t"" + i * 1.609);         
        }//looping dari 1 sampai 10

   }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        
        //Use while loop
        int mile = 1;
        while (mile <= 10) {
                System.out.println(mile + ""\t\t"" + mile * 1.609);
                mile++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static void Konversi() {
        for (int miles = 1 ; miles <= 10 ; miles++) {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
        }
    }
    
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        Konversi();
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples aim to convert miles to kilometers for values from 1 to 10 and print the results in a tabular format. The core logic and output formatting are identical, including the use of the same conversion factor (1.609). The differences in the use of a `while` loop in the first sample and a `for` loop encapsulated in a method in the second sample are superficial and do not indicate independent development. The core implementation and output are too similar to be"
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		// print seusatu
	System.out.println(""Miles\t\tKilometers"");
	System.out.println(""-------------------------------"");
	// pake pengulangan while
		int m = 1;
		while (m <= 10) {
		System.out.println(m + ""\t\t"" + m * 1.609);
		m++;
		//ditambahin iteratornya
		}
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and some comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {

    public static void main(String[] args) {
        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
        int mil = 1;

        while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);


            mil++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and a comment, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        int jarak = 1;
        while (jarak <= 10) {
            // Print hasil di sini sebanyak 10 kali
            System.out.println(jarak + ""\t\t"" + jarak * 1.609);
            jarak++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        //ulang sebanyak 10x
        int mil = 1;
        while (mil <= 10) {
            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and some comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L2 {
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        int counter = 1;
        while (counter <= 10) {
            //Menampilkan hasil
            //counter = miles
            System.out.println(counter + ""\t\t"" + counter * 1.609);
            counter++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the variable name for the loop counter, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class L2 {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");

        System.out.println(""-------------------------------"");

        int mil = 1;

        while (mil <= 10) {

            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;

        }

    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and a minor variable name change from `miles` to `mil`, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other.

Pl"
2,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class looping {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        int mil = 1;//inisialisasi while pertama kali
        while (mil <= 10) {
            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;
        }//looping dari 1 sampai 10
   }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and minor comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        
        //Use while loop
        int miles = 1;
        while (miles <= 10) {
                System.out.println(miles + ""\t\t"" + miles * 1.609);
                miles++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the addition of a comment block in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}
}",True,,True,"The two code samples are identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		// print seusatu
	System.out.println(""Miles\t\tKilometers"");
	System.out.println(""-------------------------------"");
	// pake pengulangan while
		int miles = 1;
		while (miles <= 10) {
		System.out.println(miles + ""\t\t"" + miles * 1.609);
		miles++;
		//ditambahin iteratornya
		}
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and some comments, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {

    public static void main(String[] args) {
        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
           int miles = 1;

        while (miles <= 10) {

            System.out.println(miles + ""\t\t"" + miles * 1.609);


            miles++;
            }
        }
    }",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and a comment added in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        int miles = 1;
        while (miles <= 10) {
            // Print hasil di sini sebanyak 10 kali
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            miles++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 
{
    public static void main(String[] args) 
    {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        int miles = 1;
        while (miles <= 10) 
        {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            miles++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the presence of comments in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L1 {
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        int miles = 1;
        while (miles <= 10) {
            //Menampilkan hasil
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            miles++;
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the addition of comments in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
1,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class pengulangan {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        int miles = 1;//inisialisasi while pertama kali
        while (miles <= 10) {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            miles++;
        }//looping dari 1 sampai 10
   }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and specific implementation details. Both use a while loop to iterate from 1 to 10, converting miles to kilometers using the same conversion factor (1.609) and printing the results in the same format. The only differences are in the class names and the addition of comments in the second sample, which are superficial and do not indicate independent development. The identical output formatting and logic strongly suggest that one code sample was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int mile;
    public static void main(String[] args) {
        mile = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        loops();
    }
    
    public static void loops(){
        //Use while loop
        for (int i = 10; i > 0; i--) {
            System.out.println(mile + ""\t\t"" + mile * 1.609);
                mile++;
            
        }
    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus4 {

    public static double Konversi(int miles) {
        if(miles <=10) {
            System.out.println(miles + ""\t\t"" + miles * 1.609);
            return Konversi(++miles);
        }
        return 0;
    }
    
    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Use while loop
        Konversi(1);
    }
}",True,,True,"The two code samples exhibit significant similarities in their output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). However, the second sample uses a recursive method `Konversi` to achieve the same result, while the first sample uses a `while` loop. Despite the different approaches, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.*;

class inputoutput{
	static void hitHasil(int a)
	{
		for(;a<=10;a++)
		{
			System.out.println(a + ""\t\t"" + a * 1.609);
		}
	}
	public static void main(String[] args) 
	{
		// print seusatu
	System.out.print(""Miles\t\tKilometers\n"");
	System.out.print(""-------------------------------\n"");
	// pake pengulangan while
		hitHasil(1);
		
	}
}",True,,True,"The two code samples exhibit significant similarities in their output formatting, conversion logic, and specific choices like the range of miles (1-10) and the exact conversion factor (1.609). While there are differences in the loop structure and method organization, the core implementation and output are too similar to be coincidental. The use of a helper method in the second sample and minor formatting changes do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class Main {
    public static void printMil (){

        for(int i =1;i<=10;i++){
            System.out.println(i + ""\t\t"" + i * 1.609);

        }
    }
    public static void main(String[] args) {

        //Miles to kilometer
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        // Use while loop
        printMil();
    }
}",True,,False,"The two code samples produce the same output and use the same conversion factor (1.609) to convert miles to kilometers. However, they use different looping constructs and methods to achieve this. The first sample uses a `while` loop directly in the `main` method, while the second sample uses a `for` loop encapsulated in a separate method `printMil()`. The differences in approach and method organization suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int jarak;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        // Di sini mengulang perhitungan jarak dalam mil dan kilometer
        jarak = 1;
        printJarakDalamMilDanKilo(jarak);
        
    }
   
    public static void printJarakDalamMilDanKilo(int jarak){
        for(jarak = jarak; jarak <= 10; jarak = jarak + 1){
            // Print hasil di sini sebanyak 10 kali
            System.out.println(jarak + ""\t\t"" + jarak * 1.609);
        }
    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 {

    public static void konversi(int mile) {
        if (mile != 11) {
            System.out.println(mile + ""\t\t"" + mile * 1.609);
            mile++;
            konversi(mile);
        }
    }
    
    public static void main(String[] args) {
        int mile = 1;
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");

        konversi(mile);
    }
}",True,,False,"The two code samples produce the same output of converting miles to kilometers for values from 1 to 10, but they use different approaches. The first sample uses a `while` loop to iterate through the miles, while the second sample uses a recursive method to achieve the same result. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus4L6 {

    public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        ShowTable(10);
    }

    private static void ShowTable(int jumlahData) {
        for (int i = jumlahData; i >= 1; i--) {
            //Menampilkan hasil
            int temp = jumlahData + 1 - i;
            System.out.println(temp + ""\t\t"" + ConvertMilesToKilo(temp));
        }
    }

    private static double ConvertMilesToKilo(int miles) {
        return miles * 1.609;
    }
}",True,,False,"The two code samples produce the same output of converting miles to kilometers and displaying the results in a table format. However, they use different approaches to achieve this. The first sample uses a `while` loop directly in the `main` method, while the second sample uses a `for` loop within a helper method `ShowTable` and a separate method `ConvertMilesToKilo` for the conversion. The differences in approach, method organization, and loop structure suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other.

Plagiarized"
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","public class L6 {

    public static void print(int mil)
    {
          for ( int i = 10 ; i > 0 ; i --){

            System.out.println(mil + ""\t\t"" + mil * 1.609);
            mil++;

        }
    }
    public static void main(String[] args) {
        
        int mil = 1 ;
        System.out.println(""Miles\t\tKilometers"");
        
        System.out.println(""-------------------------------"");

        print(mil);

    }
}",True,,True,"These code samples exhibit plagiarism due to their identical output formatting, conversion logic, and specific choices like the range of miles (1-10) and exact conversion factor (1.609). While there are surface-level differences in loop structure and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other."
6,4,"public class T4 {
	public static void main(String[] args) {
		System.out.println(""Miles\t\tKilometers"");
		System.out.println(""-------------------------------"");

		// Use while loop
		int miles = 1;
		while (miles <= 10) {
			System.out.println(miles + ""\t\t"" + miles * 1.609);
			miles++;
		}
	}

}","import java.util.Scanner;

public class looping {

   public static void main(String[] args) {
        System.out.println(""Miles\t\tKilometers"");
        System.out.println(""-------------------------------"");
        print(1);
   }
   
   public static void print(int mil)
   {
       int x;
       for(int i=mil;i<=10;i++) {
            x=(int)(i*1.609);
            System.out.println(i + ""\t\t"" + x);         
        }//looping dari 1 sampai 10

   }
}",True,,False,"The two code samples share the same goal of converting miles to kilometers and printing the results in a tabular format. However, they use different approaches to achieve this. The first sample uses a `while` loop directly in the `main` method, while the second sample uses a `for` loop within a separate `print` method. Additionally, the second sample includes an import statement and a different method of calculating and printing the kilometers. These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem, rather"
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T03 {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.print(""Enter weight in pounds: "");
        double weight = s.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = s.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = s.nextDouble();

        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        System.out.println(""BMI Is "" + bmi);

        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        }
        else if(bmi>=18.5 && bmi<25){
            System.out.println(""Normal"");
        }
        else if(bmi>=25 && bmi<35){
            System.out.println(""Overweight"");
        }
        else {
            System.out.println(""Obese"");
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in formatting and the addition of more specific conditions in the second sample. These differences are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;
public class T03
{
   public static void main(String[] args)
   {
     Scanner sc = new Scanner(System.in);
      System.out.print(""Enter weight in pounds: "");
      int w= sc.nextInt();
      System.out.print(""Enter feet: "");
      int f= sc.nextInt();
      System.out.print(""Enter inches: "");
      int i= sc.nextInt();
      double bmi = ((w*0.45359237)/(((f*12+ i)*0.0254)*((f*12+i)*0.0254)));
      System.out.println(""BMI is ""+bmi);
      if(bmi < 18.5)
      {
         System.out.println(""Underweight"");
      }
      else if(bmi >= 18.5 && bmi < 25)
      {
         System.out.println(""Normal"");
      }
      else if(bmi >= 25 && bmi < 35)
      {
         System.out.println(""Overweight"");
      }
      else if(bmi >= 35)
      {
         System.out.println(""Obese"");
      }


   }
}",False,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also nearly identical, with only slight differences in the range checks and formatting. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.util.Scanner;

public class T03 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double weight, feet, inches, height, bmi;
        
        System.out.print(""Enter weight in pounds: "");
        weight = sc.nextDouble();
        
        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        
        System.out.print(""Enter inches: "");
        inches = sc.nextDouble();
        
        height = feet * 12 + inches;
        bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        
        System.out.println(""BMI is "" + bmi);
        if(bmi < 18.5) {
            System.out.println(""Underweight"");
        }else if (bmi >= 18.5 && bmi < 25) {
            System.out.println(""Normal"");
        }else if(bmi >= 25 && bmi < 35) {
            System.out.println(""Overweight"");
        }else if(bmi >= 35) {
            System.out.println(""Obese"");
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print(""Enter weight in pounds: "");
        int weight=sc.nextInt();
        System.out.print(""Enter feet: "");
        int feet=sc.nextInt();
        System.out.print(""Enter inches: "");
        int inches=sc.nextInt();
        double height=feet*12+inches;
        double bmi=weight*0.45359237 / ((height * 0.0254) * (height * 0.0254));
        System.out.println(""BMI is ""+bmi);
        if(bmi<18.5)
            System.out.println(""Underweight"");
        else if(bmi>=18.5 && bmi<25)
            System.out.println(""Normal"");
        else if(bmi>=25 && bmi<35)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. These differences are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author C2FE677A63FFD5B7FFD8FACBF327DAD0
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter weight in pound: "");
        double weight = sc.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = sc.nextDouble();
        double height = feet*12+inches;
        double bmi = weight*0.45359237/((height*0.0254)*(height*0.0254));
        System.out.println(""BMI is ""+bmi);
        if(bmi<18.5)
        {
            System.out.println(""Underweight"");
        }
        else if(bmi>=18.5 && bmi<25)
        {
            System.out.println(""Normal"");
        }
        else if(bmi>=25 && bmi<35)
        {
            System.out.println(""Overweight"");
        }
        else
        {
            System.out.println(""Obese"");
        }
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. The differences in comments, author tags, and minor formatting do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes.

Plagiar"
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
import java.util.Scanner;

public class t03 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter weight in pounds : "");
        double weight = sc.nextDouble();

        System.out.print(""Enter feet : "");
        double feet = sc.nextDouble();

        System.out.print(""Enter inches : "");
        double inches = sc.nextDouble();

        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / ((height * 0.0254)
                * (height * 0.0254));
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""underweight"");
        } else if (bmi >= 18.5 && bmi < 25) {
            System.out.println(""normal"");
        } else if (bmi >= 25 && bmi < 35) {
            System.out.println(""overweight"");
        } else {
            System.out.println(""obese"");
        }

    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T03 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter weight in pounds: "");
        double weight = sc.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = sc.nextDouble();
        System.out.print(""Enter Inches: "");
        double inches = sc.nextDouble();
        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / Math.pow((height * 0.0254), 2);
        System.out.println(""BMI is ""+ bmi);
        if(bmi<18.5){
            System.out.println(""underweight"");
        } else if(bmi<25){
            System.out.println(""normal"");
        } else if(bmi<35){
            System.out.println(""overweight"");
        } else{
            System.out.println(""obese"");
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the BMI ranges and formatting. The use of `Math.pow` in the second sample instead of the manual multiplication in the first sample is a minor variation. These differences are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T03 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter weight in pounds : "");
        double weight = sc.nextDouble();
        System.out.print(""Enter feet : "");
        double feet = sc.nextDouble();
        System.out.print(""Enter inches : "");
        double inches = sc.nextDouble();
        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)) ;
        System.out.println(""The area is "" + bmi);
        if (bmi < 18.5){
            System.out.println(""Underweight"");
        }else if (bmi < 25){
            System.out.println(""Normal"");
        }else if (bmi < 35){
            System.out.println(""Overweight"");
        }else {
            System.out.println(""Obese"");
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also nearly identical, with only a minor difference in the threshold for ""Overweight"" in the second sample. The differences in variable names and minor formatting changes are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;
/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T03 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double weight, feet, inches, bmi, height;
        System.out.print(""Enter weight in pounds: "");
        weight = sc.nextDouble();
        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inches = sc.nextDouble();
        height = feet * 12 + inches;
        bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        System.out.println(""BMI is "" + bmi);
        if(bmi<18.5)
            System.out.println(""Underweight"");
        else if(bmi<25)
            System.out.println(""Normal"");
        else if(bmi<35)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also nearly identical, with only a minor difference in the threshold for ""Overweight"" in the second sample. The differences in variable names and minor formatting changes are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 95F548D9E3DDDD7F63A8FCEF1E4957F4 F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T03 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print(""Enter weight in pounds : "");
        double weight = sc.nextDouble();

        System.out.print(""Enter feet : "");
        double feet = sc.nextDouble();

        System.out.print(""Enter inches : "");
        double inches = sc.nextDouble();

        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / ((height * 0.0254)
                * (height * 0.0254));
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi >= 18.5 && bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi >= 25 && bmi < 35) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""obese"");
        }
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No3 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
                Scanner sc = new Scanner(System.in);
        double height,weight,feet,inches,bmi;
        System.out.print(""Enter weight in pounds: "");
        weight = sc.nextDouble();
        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inches = sc.nextDouble();
        height = feet * 12 + inches;
        bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        System.out.println(""BMI is "" + bmi);
        if(bmi<18.5)
            System.out.println(""Underweight"");
        else if(bmi<25)
            System.out.println(""Normal"");
        else if(bmi<35)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also nearly identical, with only a minor difference in the threshold for ""Overweight"" in the second sample. The differences in formatting and the addition of comments in the second sample are superficial and do not indicate independent development."
0,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.text.DecimalFormat;
import java.util.Scanner;

/**
 *
 * @author 4900D0A19B6894A4A514E9FF3AFCC2C0
 */
public class Soal3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter weight in pounds: "");
        double weight = sc.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = sc.nextDouble();
        double height = feet * 12 + inches;
        double bmi = weight * 0.45359237 / ((height *0.0254)*(height *0.0254));
        System.out.println(""BMI is ""+bmi);
        if(bmi<18.5)
            System.out.println(""Underweight"");
        else if(bmi>=18.5 && bmi<25)
            System.out.println(""Normal"");
        else if(bmi>=25 && bmi<35)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also very similar, with only minor differences in the range checks and formatting. The addition of the `DecimalFormat` import in the second sample is not utilized, and the differences in variable names and minor formatting do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal"
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus3 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the addition of comments and author information in the second sample. These differences are superficial and do not indicate independent development."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		double kaki;
		double bobot;
		double bmi;
		double inc;
		double height;
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		 bobot = input.nextDouble();
		System.out.print(""Enter feet: "");
		 kaki = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		 inc = input.nextDouble();
		 height = kaki * 12 + inc;
		 bmi = bobot * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
		
		
		// hasil
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
		System.out.println(""Underweight"");
		else if (bmi < 25)
		System.out.println(""Normal"");
		else if (bmi < 30)
		System.out.println(""Overweight"");
		else
		System.out.println(""Obese"");
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class cabang {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double w,f,i,h,TotalBmi;
        System.out.print(""Enter weight in pounds : "");
        w = input.nextDouble();//inputan weight
        System.out.print(""Enter feet : "");
        f = input.nextDouble();//inputan feet
        System.out.print(""Enter inches : "");
        i = input.nextDouble();//inputan inches
        h = f * 12 + i;// menghitung tinggi       
        TotalBmi = w * 0.45359237 / ((h * 0.0254) * (h * 0.0254)); //menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + TotalBmi);
        if (TotalBmi < 18.5) {
            System.out.println(""Underweight "");
        } else if (TotalBmi < 25) {
            System.out.println(""Normal "");
        } else if (TotalBmi < 30) {
            System.out.println(""Overweight "");
        } else {
            System.out.println(""Obese "");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Prompt the user to enter weight in pounds

        //enter inches
        System.out.print(""Enter inches: "");
        double inchesUser = sc.nextDouble();

        System.out.print(""Enter weight in pounds: "");
        double weightUser = sc.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
        double feetUser = sc.nextDouble();

        //process
        double heightUser = feetUser * 12 + inchesUser;
        // Compute BMI
        double bmi = weightUser * 0.45359237 / ((heightUser * 0.0254) * (heightUser * 0.0254));
        // Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L3 {
    public static void main(String[] args) {
        System.out.print(""Enter weight in pounds: "");
        Scanner inp = new Scanner(System.in);
        double berat = inp.nextDouble();

        System.out.print(""Enter feet: "");
        double kaki = inp.nextDouble();
        System.out.print(""Enter inches: "");
        double inch = inp.nextDouble();
        double tinggi = kaki * 12 + inch;

        double rata = berat * 0.45359237 /((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + rata);
        if (rata < 18.5)
            System.out.println(""Underweight"");
        else if (rata < 25)
            System.out.println(""Normal"");
        else if (rata < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        double berat;
        double feet;
        double inches;
        double tinggi;
        double bmi;

        System.out.print(""Enter weight in pounds: "");
        berat = in.nextDouble();
        System.out.print(""Enter feet: "");
        feet = in.nextDouble();
        System.out.print(""Enter inches: "");
        inches = in.nextDouble();
        tinggi = feet * 12 + inches;

        bmi = berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

public class L3 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double berat = 0;
        double inci = 0;
        double tinggi = 0 ;
        double bmi = 0;
        double feet = 0;
        
        System.out.print(""Enter weight in pounds: "");
        berat = sc.nextDouble();

        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inci = sc.nextDouble();
         tinggi = feet * 12 + inci;

       bmi = berat * 0.45359237
                / ((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double berat;
        double feet;
        double inches;
        double height;
        double bmi;
        
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        berat = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        height = feet * 12 + inches;
        // Hitung bmi di sini
        bmi = berat * 0.45359237
                / ((height * 0.0254) * (height * 0.0254));
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, variable names, and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double weights,feets,inches,heights,bmi;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //Prompt the user to enter weight in pounds 
        System.out.print(""Enter weight in pounds: "");
        weights = input.nextDouble();
        
        //Prompt the user to enter height
        System.out.print(""Enter feet: "");
        feets = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        
        //Compute BMI
        heights = feets * 12 + inches;
        bmi = weights * 0.45359237
        / ((heights * 0.0254) * (heights * 0.0254));
        cetak();
    }
    public static void cetak(){
        //Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, the addition of a helper method (`cetak`) in the second sample, and the use of different variable names. These differences are superficial and do not indicate independent development."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus3 {
    public static double hitungTinggi(double feet, double inches) {
        return feet * 12 + inches;
    }
    
    public static double hitungBmi(double weight, double feet, double inches) {
        return weight * 0.45359237 / ((hitungTinggi(feet, inches) * 0.0254) * (hitungTinggi(feet, inches) * 0.0254));
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Prompt the user to enter height 
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        // Compute BMI
        double bmi = hitungBmi(weight, feet, inches);
        // Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods for calculating height and BMI, which is a minor structural change. However, the core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	static double hitHeight(double kaki, double inc)
	{
		return kaki * 12 + inc;
	}
	static double hitBmi(double bobot, double height)
	{
		return bobot * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
	}
	public static void main(String[] args) 
	{
		double kaki;
		double bobot;
		double bmi;
		double inc;
		double height;
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		 bobot = input.nextDouble();
		System.out.print(""Enter feet: "");
		 kaki = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		 inc = input.nextDouble();
		 height = hitHeight(kaki,inc);
		 bmi = hitBmi(bobot,height);
		
		
		// hasil
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
		System.out.println(""Underweight"");
		else if (bmi < 25)
		System.out.println(""Normal"");
		else if (bmi < 30)
		System.out.println(""Overweight"");
		else
		System.out.println(""Obese"");
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {
    public static double countHeightUser(double feet,double inches){
        return feet*12+inches;
    }
    public static double countBmi (double height,double weight){
        return  weight * 0.45359237 /        ((height * 0.0254) * (height * 0.0254));
    }
    public static void printBmi(double bmi){
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");

    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Prompt the user to enter weight in pounds

        //enter inches
        System.out.print(""Enter inches: "");
        double inchesUser = sc.nextDouble();

        System.out.print(""Enter weight in pounds: "");
        double weightUser = sc.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
        double feetUser = sc.nextDouble();

        //process
        double heightUser = countHeightUser(feetUser,inchesUser);
        // Compute BMI
        double bmi =countBmi(heightUser,weightUser);
        // Display result
        System.out.println(""BMI is "" + bmi);
        printBmi(bmi);
    }
}",True,,False,"The two code samples share the same core logic and structure for calculating BMI, including the same input prompts and BMI calculation formula. However, the second sample introduces helper methods (`countHeightUser`, `countBmi`, and `printBmi`) to modularize the code, which is a significant structural difference. These helper methods indicate a different approach to organizing the code, suggesting that the second sample was independently developed to achieve the same functionality in a more modular way."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double berat,feet,inches,height,bmi;
        
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        berat = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        height = feet * 12 + inches;
        // Hitung bmi di sini
        bmi = hitungBmi(berat, height);
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
        
    }
    
    public static double hitungBmi(double berat, double height){
        double bmi;
        bmi = berat * 0.45359237
                / ((height * 0.0254) * (height * 0.0254));
        return bmi;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample includes additional comments and a helper method `hitungBmi` for calculating the BMI, but these differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 
{
    public static void main(String[] args) 
    {
        Scanner in = new Scanner(System.in);
        double berat;
        double kaki;
        double inchi;
        double tinggi;

        System.out.print(""Enter weight in pounds: "");
        berat = in.nextDouble();
        System.out.print(""Enter feet: "");
        kaki = in.nextDouble();
        System.out.print(""Enter inches: "");
        inchi = in.nextDouble();
        tinggi = kaki * 12 + inchi;

        hitungBmi(berat, tinggi);
    }

    //calculate BMI and output message
    private static void hitungBmi(double weight, double height) {
        double bmi;
        bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
        {
            System.out.println(""Underweight"");
        }
        else if (bmi < 25)
        {
            System.out.println(""Normal"");
        }
        else if (bmi < 30)
        {
            System.out.println(""Overweight"");
        }
        else
        {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, variable names, and the use of a helper method in the second sample. These differences are superficial and do not indicate independent development."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L4 {
    public static void main(String[] args) {
        System.out.print(""Enter weight in pounds: "");
        Scanner inp = new Scanner(System.in);
        double berat = inp.nextDouble();

        System.out.print(""Enter feet: "");
        double kaki = inp.nextDouble();
        System.out.print(""Enter inches: "");
        double inch = inp.nextDouble();
        double tinggi = kaki * 12 + inch;

        double rata = hitungBMI(berat, tinggi);

        BMIKategori(rata);
    }
    
    private static double hitungBMI(double weight, double height){
        return weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));
    }
    
    private static void BMIKategori(double BMI){
        System.out.println(""BMI is "" + BMI);
        if (BMI < 18.5)
            System.out.println(""Underweight"");
        else if (BMI < 25)
            System.out.println(""Normal"");
        else if (BMI < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods for calculating BMI and categorizing it, and uses different variable names, but these changes are superficial. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

public class L4 {
    public static double hitBmi(double berat, double tinggi)
    {
        return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double berat = 0;
        double inci = 0;
        double tinggi = 0 ;
       
        double feet = 0;
        
        System.out.print(""Enter weight in pounds: "");
        berat = sc.nextDouble();

        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inci = sc.nextDouble();
         tinggi = feet * 12 + inci;

        System.out.println(""BMI is "" + hitBmi(berat,tinggi));
        if (hitBmi(berat,tinggi) < 18.5) {
            System.out.println(""Underweight"");
        } else if (hitBmi(berat,tinggi) < 25) {
            System.out.println(""Normal"");
        } else if (hitBmi(berat,tinggi) < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names, the use of a helper method in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class cabang {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double w,f,i,h,TotalBmi;
        System.out.print(""Enter weight in pounds : "");
        w = input.nextDouble();//inputan weight
        System.out.print(""Enter feet : "");
        f = input.nextDouble();//inputan feet
        System.out.print(""Enter inches : "");
        i = input.nextDouble();//inputan inches
        h = f * 12 + i;// menghitung tinggi       
        TotalBmi = HitBMI(w, h);//menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + TotalBmi);
        Result(TotalBmi);
    }
    
    public static double HitBMI(double w,double h)
    {
        return  w * 0.45359237 / ((h * 0.0254) * (h * 0.0254)); 
    }
    
    public static void Result(double TotalBmi)
    {
         if (TotalBmi < 18.5) {
            System.out.println(""Underweight "");
        } else if (TotalBmi < 25) {
            System.out.println(""Normal "");
        } else if (TotalBmi < 30) {
            System.out.println(""Overweight "");
        } else {
            System.out.println(""Obese "");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods for calculating BMI and displaying the result, but these changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double weights,feets,inches,heights,bmi;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //Prompt the user to enter weight in pounds 
        System.out.print(""Enter weight in pounds: "");
        weights = input.nextDouble();
        
        //Prompt the user to enter height
        System.out.print(""Enter feet: "");
        feets = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        
        //Compute BMI
        heights = feets * 12 + inches;
        bmi = weights * 0.45359237
        / ((heights * 0.0254) * (heights * 0.0254));
        cetak();
    }
    public static void cetak(){
        //Display result
        System.out.println(""BMI is "" + bmi); 
        if (bmi >= 30){
            System.out.println(""Obese"");
        } else if (bmi >= 25) {
            System.out.println(""Overweight"");
        }else if (bmi >= 18.5) {
            System.out.println(""Normal"");
        } else {
            System.out.println(""Underweight"");
        }
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both prompt the user to enter weight in pounds and height in feet and inches, then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences are mainly in variable names, the addition of a helper method (`cetak`) in the second sample, and minor formatting changes. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus3 {
    public static double hitungTinggi(double feet, double inches) {
        return feet * 12 + inches;
    }
    
    public static double hitungBmi(double weight, double height) {
        return weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
    }
    
    public static void cekBmi(double bmi) {
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Prompt the user to enter height 
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        // Compute BMI
        double bmi = hitungBmi(weight, hitungTinggi(feet, inches));
        // Display result
        System.out.println(""BMI is "" + bmi);
        cekBmi(bmi);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods to modularize the code, but the core logic and flow of the program remain the same. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	static double kaki,bobot,bmi,inc,height;
	static double hitHeight(double kaki, double inc)
	{
		return kaki * 12 + inc;
	}
	static double hitBmi(double bobot, double height)
	{
		return bobot * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
	}
	public static void main(String[] args) 
	{
		
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		 bobot = input.nextDouble();
		System.out.print(""Enter feet: "");
		 kaki = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		 inc = input.nextDouble();
		 height = hitHeight(kaki,inc);
		 bmi = hitBmi(bobot,height);
		
		
		// hasil
		System.out.print(""BMI is "" + bmi+""\n"");
		if (bmi < 18.5)
		System.out.print(""Underweight""+""\n"");
		else if (bmi < 25)
		System.out.println(""Normal"");
		else if (bmi < 30)
		System.out.println(""Overweight"");
		else
		System.out.println(""Obese"");
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {
    public static double countHeightUser(double feet,double inches){
        return feet*12+inches;
    }
    public static double countBmi (double height,double weight){
        return  weight * 0.45359237 /        ((height * 0.0254) * (height * 0.0254));
    }
    public static void printBmi(double bmi){
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");

    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        //declare
        double inchesUser,weightUser,feetUser,heightUser,bmi;

        //enter inches
        System.out.print(""Enter inches: "");
        inchesUser = sc.nextDouble();

        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
       weightUser = sc.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
       feetUser = sc.nextDouble();

        //process
        heightUser = countHeightUser(feetUser,inchesUser);
        // Compute BMI
        bmi =countBmi(heightUser,weightUser);
        // Display result
        System.out.print(""BMI is "");
        System.out.println(bmi);
        printBmi(bmi);
    }
}",True,,False,"The two code samples share a similar structure and logic for calculating and displaying BMI. Both prompt the user to enter weight in pounds and height in feet and inches, then compute the BMI using the same formula. However, the second sample introduces helper methods to modularize the code, which is a significant structural difference. These helper methods for calculating height, BMI, and printing the BMI category indicate a more refined and independent approach to solving the problem. Despite the similarities in the core logic, the differences in code organization and method usage suggest that the second sample was independently developed."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double berat,feet,inches,height,bmi;
        
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        berat = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        height = feet * 12 + inches;
        // Hitung bmi di sini
        bmi = hitungBmi(berat, height);
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
        
    }
    
    public static double hitungBmi(double berat, double height){
        double bmi;
        bmi = berat * 0.45359237
                / ((height * 0.0254) * (height * 0.0254));
        return bmi;
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample includes additional comments and a helper method `hitungBmi` for calculating the BMI, but these differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 {
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        double berat = 0;
        double feet, inches, tinggi = 0;

        System.out.print(""Enter weight in pounds: ""); berat = in.nextDouble();
        System.out.print(""Enter feet: ""); feet = in.nextDouble();
        System.out.print(""Enter inches: ""); inches = in.nextDouble();
        
        tinggi = feet * 12 + inches;
        
        bmi(berat, tinggi);
    }
    
    private static void bmi(double weight, double height) {
        double bmi = weight * 0.45359237 / Math.pow((height * 0.0254), 2);
        
        System.out.println(""BMI is "" + bmi);
        
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences are mainly in variable names, minor formatting, and the use of a helper method in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L5 {
    public static void main(String[] args) {
        System.out.print(""Enter weight in pounds: "");
        Scanner inp = new Scanner(System.in);
        double berat = inp.nextDouble();

        System.out.print(""Enter feet: "");
        double kaki = inp.nextDouble();
        System.out.print(""Enter inches: "");
        double inch = inp.nextDouble();

        BMIKategori(hitungBMI(berat, kaki * 12 + inch));
    }
    
    private static double hitungBMI(double weight, double height){
        return weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));
    }
    
    private static void BMIKategori(double BMI){
        System.out.println(""BMI is "" + BMI);
        if (BMI < 18.5)
            System.out.println(""Underweight"");
        else if (BMI < 25)
            System.out.println(""Normal"");
        else if (BMI < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names, the use of helper methods in the second sample, and the addition of comments are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

public class L5 {

    public static double hitBmi(double berat, double tinggi) {
        return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double berat, inci, tinggi, feet = 0;

        System.out.print(""Enter weight in pounds: "");
        berat = sc.nextDouble();

        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inci = sc.nextDouble();
        tinggi = feet * 12 + inci;

        System.out.println(""BMI is "" + hitBmi(berat, tinggi));
        if (hitBmi(berat, tinggi) < 18.5) {
            System.out.println(""Underweight"");
        } else if (hitBmi(berat, tinggi) < 25) {
            System.out.println(""Normal"");
        } else if (hitBmi(berat, tinggi) < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class cabang {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double w,f,i,h,TotalBmi;
        System.out.print(""Enter weight in pounds : "");
        w = input.nextDouble();//inputan weight
        System.out.print(""Enter feet : "");
        f = input.nextDouble();//inputan feet
        System.out.print(""Enter inches : "");
        i = input.nextDouble();//inputan inches
        h = f * 12 + i;// menghitung tinggi       
        TotalBmi = HitBMI(w, h);//menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + TotalBmi);
        Result(TotalBmi);
    }
    
    public static double HitBMI(double w,double h)
    {
        return  w * 0.45359237 / ((h * 0.0254) * (h * 0.0254)); 
    }
    
    public static void Result(double TotalBmi)
    {
         if (TotalBmi < 18.5) {
            System.out.println(""Underweight "");
        } else if (TotalBmi < 25) {
            System.out.println(""Normal "");
        } else if (TotalBmi < 30) {
            System.out.println(""Overweight "");
        } else {
            System.out.println(""Obese "");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods for calculating BMI and displaying the result, but these changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //Prompt the user to enter weight in pounds 
        System.out.print(""Enter weight in pounds: "");
        double weights = input.nextDouble();
        
        //Prompt the user to enter height
        System.out.print(""Enter feet: "");
        double feets = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        
        double heights = feets * 12 + inches;
        
        //Compute BMI
        double bmi = weights * 0.45359237
        / ((heights * 0.0254) * (heights * 0.0254));
        
        //Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, variable names, and the addition of braces in the conditional statements in the second sample. These differences are superficial and do not indicate independent development."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus3 {
    
    public static double hitungTinggi(double feet, double inches) {
        return feet * 12 + inches;
    }
    
    public static double hitungBmi(double weight, double height) {
        return weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Prompt the user to enter height 
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        double height = hitungTinggi(feet, inches);
        // Compute BMI
        double bmi = hitungBmi(weight, height);
        // Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample introduces helper methods for calculating height and BMI, which is a minor structural change. However, the core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		double bobot = input.nextDouble();
		System.out.print(""Enter feet: "");
		double kaki = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		double inc = input.nextDouble();
		double height = kaki * 12 + inc;
		double bmi = bobot * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
		
		
		// hasil
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
		System.out.println(""Underweight"");
		else if (bmi < 25)
		System.out.println(""Normal"");
		else if (bmi < 30)
		System.out.println(""Overweight"");
		else
		System.out.println(""Obese"");
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weightUser = sc.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
        double feetUser = sc.nextDouble();
        //enter inches
        System.out.print(""Enter inches: "");
        double inchesUser = sc.nextDouble();

        //process
        double heightUser = feetUser * 12 + inchesUser;
        // Compute BMI
        double bmi = weightUser * 0.45359237 / ((heightUser * 0.0254) * (heightUser * 0.0254));
        // Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the addition of more descriptive variable names in the second sample. These differences are superficial and do not indicate independent development."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        double berat = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        double height = feet * 12 + inches;
        // Hitung bmi di sini
        double bmi = berat * 0.45359237
                / ((height * 0.0254) * (height * 0.0254));
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, comments, and the addition of braces in the conditional statements in the second sample. These differences are superficial and do not indicate independent development."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        System.out.print(""Enter weight in pounds: "");
        double berat = in.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = in.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = in.nextDouble();
        double tinggi = feet * 12 + inches;

        double bmi = berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the addition of comments and author information in the second sample. These differences are superficial and do not indicate independent development."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L2 {
    public static void main(String[] args) {
        Scanner inp = new Scanner(System.in);

        System.out.print(""Enter weight in pounds: "");
        double berat = inp.nextDouble();

        System.out.print(""Enter feet: "");
        double kaki = inp.nextDouble();
        System.out.print(""Enter inches: "");
        double inch = inp.nextDouble();
        double tinggi = kaki * 12 + inch;

        double rata = berat * 0.45359237 /((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + rata);
        if (rata < 18.5)
            System.out.println(""Underweight"");
        else if (rata < 25)
            System.out.println(""Normal"");
        else if (rata < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

public class L2 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print(""Enter weight in pounds: "");
        double berat = sc.nextDouble();

        System.out.print(""Enter feet: "");
        double feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        double inci = sc.nextDouble();
        double tinggi = feet * 12 + inci;

        double bmi = berat * 0.45359237
                / ((tinggi * 0.0254) * (tinggi * 0.0254));

        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are in variable names and minor formatting changes, which are superficial and do not indicate independent development."
2,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class cabang {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print(""Enter weight in pounds : "");
        double w = input.nextDouble();//inputan weight
        System.out.print(""Enter feet : "");
        double f = input.nextDouble();//inputan feet
        System.out.print(""Enter inches : "");
        double i = input.nextDouble();//inputan inches
        double h = f * 12 + i;// menghitung tinggi       
        double TotalBmi = w * 0.45359237 / ((h * 0.0254) * (h * 0.0254)); //menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + TotalBmi);
        if (TotalBmi < 18.5) {
            System.out.println(""Underweight "");
        } else if (TotalBmi < 25) {
            System.out.println(""Normal "");
        } else if (TotalBmi < 30) {
            System.out.println(""Overweight "");
        } else {
            System.out.println(""Obese "");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, variable names, and comments in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //Prompt the user to enter weight in pounds 
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        
        //Prompt the user to enter height
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        
        double height = feet * 12 + inches;
        
        //Compute BMI
        double bmi = weight * 0.45359237
        / ((height * 0.0254) * (height * 0.0254));
        
        //Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, the addition of braces in the conditional statements in the second sample, and the presence of a comment header in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	public static void main(String[] args) 
	{
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		double weight = input.nextDouble();
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();
		double height = feet * 12 + inches;
		double bmi = weight * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
		
		
		// hasil
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
		System.out.println(""Underweight"");
		else if (bmi < 25)
		System.out.println(""Normal"");
		else if (bmi < 30)
		System.out.println(""Overweight"");
		else
		System.out.println(""Obese"");
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the class name in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class percabangan {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();//inputan weight
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();//inputan feet
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();//inputan inches
        double height = feet * 12 + inches;// menghitung tinggi       
        double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254)); //menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, comments, and the addition of braces in the conditional statements in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        //enter inches
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();

        //process
        double height = feet * 12 + inches;
        // Compute BMI
        double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        // Display result
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and comments in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L1 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();

        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        double height = feet * 12 + inches;

        double bmi = weight * 0.45359237 /((height * 0.0254) * (height * 0.0254));

        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi < 25)
            System.out.println(""Normal"");
        else if (bmi < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes and the addition of comments and author information in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //masukkan berat dan tinggi
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        double height = feet * 12 + inches;
        
        //hitung BMI
        double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));
        
        //kategori
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, comments, and the addition of braces in the conditional statements in the second sample. These differences are superficial and do not indicate independent development."
1,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        double height = feet * 12 + inches;
        // Hitung bmi di sini
        double bmi = weight * 0.45359237
                / ((height * 0.0254) * (height * 0.0254));
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The only differences are minor formatting changes, comments, and the addition of braces in the conditional statements in the second sample. These differences are superficial and do not indicate independent development."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double weights,feets,inches,heights,bmi;

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        
        //Prompt the user to enter weight in pounds 
        System.out.print(""Enter weight in pounds: "");
        weights = input.nextDouble();
        
        //Prompt the user to enter height
        System.out.print(""Enter feet: "");
        feets = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        
        //Compute BMI
        heights = feets * 12 + inches;
        bmi = weights * 0.45359237
        / ((heights * 0.0254) * (heights * 0.0254));
        cetak();
    }
    public static void cetak(){
        //Display result
        System.out.println(""BMI is "" + bmi); 
        if (bmi >= 30){
            System.out.println(""Obese"");
        } else if (bmi >= 25) {
            System.out.println(""Overweight"");
        }else if (bmi >= 18.5) {
            System.out.println(""Normal"");
        } else {
            System.out.println(""Underweight"");
        }
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both prompt the user to enter weight in pounds and height in feet and inches, then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences are mainly in variable names, the addition of a helper method (`cetak`) in the second sample, and minor formatting changes. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus3 {
    public static double hitungTinggi(double feet, double inches) {
        return feet * 12 + inches;
    }
    
    public static double hitungBmi(double weight, double feet, double inches) {
        return weight * 0.45359237 / ((hitungTinggi(feet, inches) * 0.0254) * (hitungTinggi(feet, inches) * 0.0254));
    }
    
    public static String cekBmi(double bmi) {
        if (bmi < 18.5) {
            return ""Underweight"";
        } else if (bmi < 25) {
            return ""Normal"";
        } else if (bmi < 30) {
            return ""Overweight"";
        } else {
            return ""Obese"";
        }
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        double weight = input.nextDouble();
        // Prompt the user to enter height 
        System.out.print(""Enter feet: "");
        double feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        double inches = input.nextDouble();
        // Display result
        System.out.println(""BMI is "" + hitungBmi(weight, feet, inches));
        System.out.println(cekBmi(hitungBmi(weight, feet, inches)));
    }
}",True,,True,"The two code samples share the same core logic and structure for calculating BMI and categorizing it. Both prompt the user to enter weight in pounds and height in feet and inches, then compute BMI using the same formula. The second sample, however, breaks down the logic into separate methods for calculating height, BMI, and categorizing BMI, which adds a layer of abstraction. Despite these structural differences, the underlying logic and calculations are identical, suggesting that one code sample was derived from the other with some refactoring."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

class inputoutput{
	static double kaki,bobot,bmi,inc,height;
	static double hitHeight(double kaki, double inc)
	{
		return kaki * 12 + inc;
	}
	static double hitBmi(double bobot, double height)
	{
		return bobot * 0.45359237 /
		((height * 0.0254) * (height * 0.0254));
	}
	public static void main(String[] args) 
	{
		
		Scanner input = new Scanner(System.in);
		System.out.print(""Enter weight in pounds: "");
		
		 bobot = input.nextDouble();
		System.out.print(""Enter feet: "");
		 kaki = input.nextDouble();
		
		System.out.print(""Enter inches: "");
		 inc = input.nextDouble();
		 height = hitHeight(kaki,inc);
		 bmi = hitBmi(bobot,height);
		
		
		// hasil
		System.out.print(""BMI is "" + bmi+""\n"");
		if(bmi>=30)
		System.out.println(""Obese"");
	else if(bmi>=25)
		System.out.println(""Overweight"");
	else if (bmi >= 18.5)
		System.out.println(""Normal"");
	else
		System.out.print(""Underweight""+""\n"");
	
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also similar, although the order of conditions is slightly different. The second sample uses helper methods to calculate height and BMI, which is a minor structural difference. However, the core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class Main {
    public static double countHeightUser(double feet,double inches){
        return feet*12+inches;
    }
    public static double countBmi (double height,double weight){
        return  weight * 0.45359237 /    (Math.pow((height * 0.0254),2));
    }
    public static void printBmi(double bmi){
        if (bmi < 18.5)
            System.out.println(""Underweight"");
        else if (bmi > 18.5&& bmi < 25)
            System.out.println(""Normal"");
        else if (bmi > 25&& bmi < 30)
            System.out.println(""Overweight"");
        else if(bmi > 30)
            System.out.println(""Obese"");

    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        //declare
        double inchesUser,weightUser,feetUser,heightUser,bmi;

        //enter inches
        System.out.print(""Enter inches: "");
        inchesUser = sc.nextDouble();

        // Prompt the user to enter weight in pounds
        System.out.print(""Enter weight in pounds: "");
        weightUser = sc.nextDouble();
        // Prompt the user to enter height
        //enter feet
        System.out.print(""Enter feet: "");
        feetUser = sc.nextDouble();

        //process
        heightUser = countHeightUser(feetUser,inchesUser);
        // Compute BMI
        bmi =countBmi(heightUser,weightUser);
        // Display result
        System.out.print(""BMI is "");
        System.out.println(bmi);
        printBmi(bmi);
    }
}",True,,True,"The two code samples share the same core logic and structure for calculating and displaying BMI. Both prompt the user to enter weight in pounds and height in feet and inches, then compute BMI using the same formula, and finally categorize the BMI. However, the second sample introduces helper methods for calculating height, BMI, and printing the BMI category, which adds a layer of abstraction and modularity. Despite these differences, the core logic and flow are identical, suggesting that one sample was likely derived from the other with some refactoring."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double berat,feet,inches,height,bmi;
        
        // Masukan beban dalam satuan pounds
        System.out.print(""Enter weight in pounds: "");
        berat = input.nextDouble();
        // Masukan tinggi dalam satuan kaki dan inci
        System.out.print(""Enter feet: "");
        feet = input.nextDouble();
        System.out.print(""Enter inches: "");
        inches = input.nextDouble();
        height = feet * 12 + inches;
        // Hitung bmi di sini
        bmi = hitungBmi(berat, height);
        // Print hasil di sini
        System.out.println(""BMI is "" + bmi);
        if (bmi < 18.5) {
            System.out.println(""Underweight"");
        } else if (bmi < 25) {
            System.out.println(""Normal"");
        } else if (bmi < 30) {
            System.out.println(""Overweight"");
        } else {
            System.out.println(""Obese"");
        }
        
    }
    
    public static double hitungBmi(double berat, double height){
        double bmi;
        bmi = berat * 0.45359237
                / (Math.pow((height * 0.0254), 2));
        return bmi;
    }
}",True,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both prompt the user to enter weight in pounds and height in feet and inches, then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The second sample includes additional comments, a helper method for calculating BMI, and some variable name changes, but these differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        double berat, feet,inches, tinggi;

        System.out.print(""Enter weight in pounds: "");
        berat = in.nextDouble();
        System.out.print(""Enter feet: "");
        feet = in.nextDouble();
        System.out.print(""Enter inches: "");
        inches = in.nextDouble();
        
        result(fungsiBmi(berat, feet, inches));
    }

    private static double fungsiBmi(double berat, double feet, double inches) {
        double tinggi = feet * 12 + inches;
        return berat * 0.45359237 / Math.pow((tinggi * 0.0254), 2);
    }
    
    private static void result(double res) {
        System.out.println(""BMI is "" + res);
        if (res < 18.5)
            System.out.println(""Underweight"");
        else if (res >= 18.5 && res < 25)
            System.out.println(""Normal"");
        else if (res >= 25 && res < 30)
            System.out.println(""Overweight"");
        else
            System.out.println(""Obese"");
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also identical. The differences in variable names, the use of helper methods in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus3L6 {

    public static void main(String[] args) {
        System.out.print(""Enter weight in pounds: "");
        Scanner inp = new Scanner(System.in);
        double berat = inp.nextDouble();

        System.out.print(""Enter feet: "");
        double kaki = inp.nextDouble();
        System.out.print(""Enter inches: "");
        double inch = inp.nextDouble();
        
        //Print Hasil perhitungan
        BMIKategori(hitungBMI(berat, kaki * 12 + inch));
    }

    private static double hitungBMI(double weight, double height) {
        double temp = height * 0.0254;
        return weight * 0.45359237 / (temp * temp);
    }

    private static void BMIKategori(double BMI) {
        System.out.println(""BMI is "" + BMI);
        if (BMI > 30) {
            System.out.println(""Obese"");
        } else if (BMI > 25) {
            System.out.println(""Overweight"");
        } else if (BMI > 18.5) {
            System.out.println(""Normal"");
        } else {
            System.out.println(""Underweight"");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also present in both samples, although the order of the conditions is slightly different. The second sample uses helper methods to calculate BMI and categorize it, which is a minor structural difference. However, the core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.*;

public class L6 {

    public static double hitBmi(double berat, double tinggi) {
        return berat * 0.45359237 / ((tinggi * 0.0254) * (tinggi * 0.0254));
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double berat, inci, tinggi, feet = 0;

        System.out.print(""Enter weight in pounds: "");
        berat = sc.nextDouble();

        System.out.print(""Enter feet: "");
        feet = sc.nextDouble();
        System.out.print(""Enter inches: "");
        inci = sc.nextDouble();
        tinggi = feet * 12 + inci;

        System.out.println(""BMI is "" + hitBmi(berat, tinggi));
        if (hitBmi(berat, tinggi) < 25 && hitBmi(berat, tinggi) > 18.5) {
            System.out.println(""Normal"");
        } else if (hitBmi(berat, tinggi) < 30 && hitBmi(berat, tinggi) > 25) {
            System.out.println(""Overweight"");
        } else if (hitBmi(berat, tinggi) > 30) {
            System.out.println(""Obese"");
        } else {
            System.out.println(""Underweight"");
        }
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also similar. The differences in variable names, the use of a helper method in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,3,"import java.util.Scanner;

public class T3 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Prompt the user to enter weight in pounds
		System.out.print(""Enter weight in pounds: "");
		double weight = input.nextDouble();

		// Prompt the user to enter height
		System.out.print(""Enter feet: "");
		double feet = input.nextDouble();
		System.out.print(""Enter inches: "");
		double inches = input.nextDouble();

		double height = feet * 12 + inches;

		// Compute BMI
		double bmi = weight * 0.45359237 / ((height * 0.0254) * (height * 0.0254));

		// Display result
		System.out.println(""BMI is "" + bmi);
		if (bmi < 18.5)
			System.out.println(""Underweight"");
		else if (bmi < 25)
			System.out.println(""Normal"");
		else if (bmi < 30)
			System.out.println(""Overweight"");
		else
			System.out.println(""Obese"");
	}

}","import java.util.Scanner;

public class cabang {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double w,f,i,h,TotalBmi;
        System.out.print(""Enter weight in pounds : "");
        w = input.nextDouble();//inputan weight
        System.out.print(""Enter feet : "");
        f = input.nextDouble();//inputan feet
        System.out.print(""Enter inches : "");
        i = input.nextDouble();//inputan inches
        h = f * 12 + i;// menghitung tinggi       
        TotalBmi = HitBMI(w, h);//menghitung BMI
        //menampilkan hasil
        System.out.println(""BMI is "" + TotalBmi);
        Result(TotalBmi);
    }
    
    public static double HitBMI(double w,double h)
    {
        return  (w * 0.45359237) / ((h * 0.0254) * (h * 0.0254)); 
    }
    
    public static void Result(double TotalBmi)
    {
         if (TotalBmi > 30) {
            System.out.println(""Obese "");
        } else if (TotalBmi < 25 && TotalBmi>18.5) {
            System.out.println(""Normal "");
        } else if (TotalBmi>25 && TotalBmi < 30) {
            System.out.println(""Overweight "");
        } else {
            System.out.println(""Underweight "");
        }
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter weight in pounds, height in feet and inches, and then calculate the BMI using the same formula. The conditional statements for categorizing the BMI are also present in both samples. The second sample introduces helper methods for calculating BMI and displaying the result, and uses different variable names and comments. However, these differences are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.text.DecimalFormat;
import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T02 {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.print(""Enter the radius and length of a cylinder :"");
        double radius = s.nextDouble();
        double length = s.nextDouble();
        double area = radius *radius * 3.14159;

        DecimalFormat df = new DecimalFormat("".####"");
        DecimalFormat df2= new DecimalFormat("".#"");
        double volume = area * length;
        System.out.println(""The area is ""+df.format(area));
        System.out.println(""The volume is ""+df2.format(volume));
    }
}",False,,False,"The two code samples share a similar structure and logic for calculating the area and volume of a cylinder. Both prompt the user to enter the radius and length, use the same mathematical formulas for the calculations, and print the results. However, the second sample introduces additional functionality by using the `DecimalFormat` class to format the output, which is a significant enough change to suggest some level of independent development. The core logic is similar, but the added complexity in the second sample indicates that it was not a direct copy."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;
public class T02
{
   public static void main(String[] args)
   {
      Scanner sc = new Scanner(System.in);
      System.out.print(""Enter the radius and length of a cylinder: "");
      String radlen= sc.nextLine();
      String[] splited = radlen.split(""\\s+"");
      float rad = Float.parseFloat(splited[0]);
      float len = Float.parseFloat(splited[1]);
      System.out.println(""The area is ""+Math.round(rad*rad*3.14159*10000.0)/10000.0);
      System.out.println(""The volume is ""+Math.round(rad*rad*3.14159*len*10.0)/10.0);

   }
}",False,,False,"The two code samples have similar goals: to calculate the area and volume of a cylinder based on user input. However, the implementation details differ significantly. The first sample uses `Scanner.nextDouble()` to read the radius and length directly as double values, while the second sample reads the input as a single string, splits it, and then parses the values as floats. Additionally, the second sample uses `Math.round` for rounding the results, which is not present in the first sample. These differences in approach and implementation suggest that the code samples were independently developed"
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.util.Scanner;
import java.text.DecimalFormat;

public class T02 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double radius, length, area, volume;
        
        System.out.print(""Enter the radius and length of a cylinder: "");
        radius = sc.nextDouble();
        length = sc.nextDouble();
        
        area = radius * radius * 3.14159;
        volume = area * length ;
        
        DecimalFormat a = new DecimalFormat(""0.0000"");
        DecimalFormat v = new DecimalFormat(""0.0"");
        
        System.out.println(""The area is "" + a.format(area));
        System.out.println(""The volume is "" + v.format(volume));
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of `DecimalFormat` for formatting the output in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.sql.SQLOutput;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius=sc.nextDouble();
        int length=sc.nextInt();

        double area=radius*radius*3.14159;
        System.out.println(""The area is ""+area);
        System.out.println(""The volume is ""+area*length);
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, minor formatting, and the use of different import statements are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 672CAF27F5363DC833BDA5099775E891
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        System.out.print(""Enter the radius and length of a cylinder:"");
        Scanner sc = new Scanner(System.in);
        double radius = sc.nextDouble();
        int length = sc.nextInt();
        double area = radius*radius*3.14159;
        double volume = length*radius;
        System.out.println(""The area is ""+area);
        System.out.println(""The volume is ""+volume);
        
    }
    
}",False,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, minor formatting, and the use of comments in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
import java.text.DecimalFormat;
import java.util.Scanner;

public class t02 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter the radius and length of a cylinder : "");
        double radius = sc.nextDouble();
        double length = sc.nextDouble();
        double area = radius * radius * 3.14159;
        double volume = (radius * radius * 3.14159) * length;
        DecimalFormat areaFormat = new DecimalFormat(""#.#####"");
        DecimalFormat volumeFormat = new DecimalFormat(""#.#"");

        System.out.println(""The area is "" + areaFormat.format(area));
        System.out.println(""The volume is "" + volumeFormat.format(volume));
    }

}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in formatting the output using `DecimalFormat` in the second sample and minor changes in variable names are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T02 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter the radius and length of a cylinder:"");
        double radius = sc.nextDouble();
        double length = sc.nextDouble();
        double area = Math.pow(radius, 2) * Math.PI;
        double volume = area * length;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume is "" + volume);
        
        
    }
}",False,,True,"The two code samples are very similar in terms of structure, logic, and functionality. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences are mainly in variable names and the use of `Math.pow` and `Math.PI` in the second sample instead of direct multiplication and a hardcoded value for π in the first sample. These differences are minor and do not indicate independent development. The core logic and flow of the program are identical,"
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author Shiroinu
 */
public class T02 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter the radius and the length of the cilinder : "");
        double rad = sc.nextDouble();
        double length = sc.nextDouble();
        double area = Math.PI * rad * rad;
        double volume = Math.PI * rad * rad* length;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume is "" + volume);
    }
}",False,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, minor formatting, and the use of `Math.PI` in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;
/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T02 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double radius, length, area, volume;
        System.out.print(""Enter the radius and length of a cylinder: "");
        radius = sc.nextDouble();
        length = sc.nextDouble();
        area = radius * radius * 3.14159;
        volume = area * length;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume is "" + volume);
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with nearly identical messages. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T02 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print(""Enter the radius and length of a cylinder : "");
        double radius = sc.nextDouble();
        double length = sc.nextDouble();

        double area = radius * radius * 3.14159;
        double volume = area * length;

        System.out.println(""The area is "" + area);
        System.out.println(""The volume "" + volume);

    }
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results. The differences are minor, such as variable names and formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No2 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        double radius, length, area, volume;
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter the radius and length of a cylinder: "");
        radius = sc.nextDouble();
        length = sc.nextDouble();
        area = radius * radius * 3.14159;
        volume = area * length;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume is "" + volume);
        
    }
    
}",False,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with nearly identical messages. The differences are minor, such as the use of different variable names and slight variations in formatting and comments. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
0,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.text.DecimalFormat;
import java.util.Scanner;

/**
 *
 * @author 4900D0A19B6894A4A514E9FF3AFCC2C0
 */
public class Soal2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        DecimalFormat dfArea = new DecimalFormat(""#.####"");
        DecimalFormat dfVolume = new DecimalFormat(""#.#"");

        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = sc.nextDouble();
        double panjang = sc.nextDouble();
        System.out.println(""The area is "" + dfArea.format((radius*radius*3.14159)));
        System.out.println(""The volume is ""+ dfVolume.format(((radius*radius*3.14159)*panjang)));
    }
    
}",False,,False,"The two code samples share a similar structure and logic for calculating the area and volume of a cylinder based on user input for radius and length. However, the second sample introduces additional complexity by using the `DecimalFormat` class to format the output, which is a significant difference in implementation. The use of different variable names and the added formatting functionality suggest that the second sample was independently developed, even though it solves the same problem."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double radius,length,areas,volumes;
    
    public static void main(String[] args) {
        //Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner input = new Scanner(System.in);
        radius = input.nextDouble();
        length = input.nextDouble();
        areas = radius * radius * 3.14159;
        volumes = areas * length;
        System.out.println(""The area is "" + areas);
        System.out.println(""The volume of the cylinder is "" + volumes);
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes, variable names, and the addition of a class-level variable declaration in the second sample. These differences are superficial and do not indicate independent development."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {
    public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are in the class names and the presence of comments and author information in the second sample. These differences are superficial and do not indicate independent development."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;
class inputoutput{
	public static void main(String[] args){
		Scanner masukan = new Scanner(System.in);
		double rad,panjang;
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		rad = masukan.nextDouble();
		panjang = masukan.nextDouble();
		
		double a;
		//perhitungan
		a = rad * rad * 3.14159;
		double vol;
		vol = a * panjang;
		
		// cetak hasil
		System.out.println(""The area is "" + a);
		System.out.println(""The volume of the cylinder is "" + vol);		
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // Enter radius of the cylinder
        double r=0;
        double len=0;
        double a =0;
        double volume=0;

        System.out.print(""Enter the radius and length of a cylinder: "");
        r = scan.nextDouble();
        len = scan.nextDouble();

        a = r * r * 3.14159;
        volume = a * len;
        //Output
        System.out.println(""The area is "" + a);
        System.out.println(""The volume of the cylinder is "" + volume);

    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
       
        double jejari = input.nextDouble();
        double panjang = input.nextDouble();
		
        double area = jejari * jejari * 3.14159;
        double volume = area * panjang;
        // Mencetak luas dan volume
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
        }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are in variable names and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 
{

    public static void main(String[] args) 
    {
        Scanner x = new Scanner(System.in);
        double vol = 0;
        double luasAlas = 0;
        
        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = x.nextDouble();
        double length = x.nextDouble();
        
        luasAlas = radius * radius * 3.14159;
        vol = luasAlas * length;
        
        System.out.println(""The area is "" + luasAlas);
        System.out.println(""The volume of the cylinder is "" + vol);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L3 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner in = new Scanner(System.in);
        double radius = in.nextDouble();
        double length = in.nextDouble();
        // Hitung Area
        double luas = radius * radius * 3.14159;
        // Print area cylinder
        System.out.println(""The area is "" + luas);
        //Hitung Volume
        double volume = luas * length;
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + volume);
    }
    
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and then print the results. The differences are minor, such as the addition of comments and slight changes in variable names and formatting. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;

public class L3 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double jari2 = 0;
        double panjang = 0;
        System.out.print(""Enter the radius and length of a cylinder: "");
        jari2 = input.nextDouble();
        panjang = input.nextDouble();
        double luas = jari2 * jari2 * 3.14159;
        double total = luas * panjang;
        System.out.print(""The area is "" + luas + "" , "");
        System.out.println(""The volume of the cylinder is "" + total);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
3,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inout{

    public static void main(String[] args) {
        double rad,l,ar,vol;
        Scanner sc = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        rad = sc.nextDouble();//menginput radius
        l = sc.nextDouble();//menginput length
        ar = rad*rad*3.14159;//mencari area
        vol = ar*l;//mencari voulume
        System.out.println(""The area is "" + ar);//mengeluarkan hasil
        System.out.println(""The volume of the cylinder is "" + vol);//mengeluarkan hasil
    }

}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor comments in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double radius,length,areas,volumes;
    
    public static void main(String[] args) {
        //Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner input = new Scanner(System.in);
        radius = input.nextDouble();
        length = input.nextDouble();
        areas = radius * radius * 3.14159;
        volumes = areas * length;
        cetak();
    }

    public static void cetak() {
        System.out.println(""The area is "" + areas);
        System.out.println(""The volume of the cylinder is "" + volumes);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of a helper method (`cetak`) in the second sample, and the addition of a class-level comment are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {
    public static double hitungArea(double r) {
        return r * r * Math.PI;
    }
    
    public static double hitungVolume(double r, double l) {
        return hitungArea(r) * l;
    }
    
    public static void main(String[] args) {
        
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double r = input.nextDouble();
        double l = input.nextDouble();
        
        System.out.println(""The area is "" + hitungArea(r));
        System.out.println(""The volume of the cylinder is "" + hitungVolume(r, l));
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;
class inputoutput{
	static double rad,panjang;
	
	static void input()
	{
		Scanner masukan = new Scanner(System.in);
		rad = masukan.nextDouble();
		panjang = masukan.nextDouble();
	}
	static double hitArea()
	{
		return rad * rad * 3.14159;
	}
	public static void main(String[] args){
		
		
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		input();
		
		double a;
		//perhitungan
		a = hitArea();
		double vol;
		vol = a * panjang;
		
		// cetak hasil
		System.out.println(""The area is "" + a);
		System.out.println(""The volume of the cylinder is "" + vol);		
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods, and the organization of the code in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {
    public static double area(double r){
        double area;
        area=r*r*3.14159;
        return area;
    }
    public static double volume(double len,double a){
        double volume;
        volume=len*a;
        return volume;
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // Enter radius of the cylinder    
        double r=0;
        double len=0;
        double a =0;
        double volume=0;

        System.out.print(""Enter the radius and length of a cylinder: "");
        r = scan.nextDouble();
        len = scan.nextDouble();

        a = area(r);
        volume = volume(len,a);
        //Output
        System.out.println(""The area is "" + a);
        System.out.println(""The volume of the cylinder is "" + volume);

    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        
        double jejari = input.nextDouble();
        double panjang = input.nextDouble();
        
        // Mencetak luas dan volume
        System.out.println(""The area is "" + hitungArea(jejari));
        System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));
        }
    
    public static double hitungArea(double jejari){
        double area;
        return area = jejari * jejari * 3.14159;
    }
    
    public static double hitungVolume(double panjang, double jejari){
        double volume;
        return volume = hitungArea(jejari) * panjang;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, comments, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        //masukkan nilai
        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = input.nextDouble();
        double tinggi = input.nextDouble();
        
        System.out.println(""The area is "" + hitungLuasAlas(radius));
        System.out.println(""The volume of the cylinder is "" + hitungVolume(hitungLuasAlas(radius), tinggi));
    }

    //fungsi luas alas
    public static double hitungLuasAlas(double rad) {
        double luasAlas = rad * rad * 3.14159;
        return luasAlas;
    }

    //fungsi volume
    public static double hitungVolume(double luasAlas, double tinggi) {
        double volume = luasAlas * tinggi;
        return volume;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods in the second sample, and the addition of comments and author information are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L4 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner in = new Scanner(System.in);
        float radius = in.nextFloat();
        float length = in.nextFloat();
        // Hitung Area
        double luas = hitungLuas(radius);
        // Print area cylinder
        System.out.println(""The area is "" + luas);
        //Hitung Volume
        double volume = hitungVolume(luas, length);
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + volume);
    }
    
    private static double hitungLuas(float radius){
        return radius * radius * 3.14159;
    }
    
    private static double hitungVolume(double luas, float length){
        return luas * length;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;

public class L4 {

    public static double hitLuas(double jari2) {
        return jari2 * jari2 * 3.14159;
    }

    public static double total(double luas, double panjang) {
        return luas * panjang;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double jari2 = 0;
        double panjang = 0;
        System.out.print(""Enter the radius and length of a cylinder: "");
        jari2 = input.nextDouble();
        panjang = input.nextDouble();
        double luas = hitLuas(jari2);
        double total = total(luas,panjang);
        
        System.out.print(""The area is "" + luas + "" , "");
        System.out.println(""The volume of the cylinder is "" + total);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
4,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inout{

    public static void main(String[] args) {
        double rad,l,ar,vol;
        Scanner sc = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        rad = sc.nextDouble();//menginput radius
        l = sc.nextDouble();//menginput length
        ar = hitungAr(rad);//mencari area
        vol = hitungVol(ar,l);//mencari voulume
        System.out.println(""The area is "" + ar);//mengeluarkan hasil
        System.out.println(""The volume of the cylinder is "" + vol);//mengeluarkan hasil
     
    }
    
    public static double hitungVol(double ar,double l)
    {
        return ar*l;
    }
    
    public static double hitungAr(double rad)
    {
        return rad*rad*3.14159;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, comments, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double radius,length,areas,volumes;
    
    public static void main(String[] args) {
        //Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner input = new Scanner(System.in);
        radius = input.nextDouble();
        length = input.nextDouble();
        areas = radius * radius * 3.14159;
        volumes = areas * length;
        cetak();
    }

    public static void cetak() {
        System.out.println(""The area is "" + areas);
        System.out.println(""The volume of the cylinder is "" + volumes);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of a helper method (`cetak`) in the second sample, and the addition of a class-level comment are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {
    public static double hitungArea(double r) {
        return r * r * Math.PI;
    }
    
    public static void main(String[] args) {
        
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double r = input.nextDouble();
        double l = input.nextDouble();
        
        System.out.println(""The area is "" + hitungArea(r));
        System.out.println(""The volume of the cylinder is "" + hitungArea(r)*l);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of a helper method in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;
class inputoutput{
	static double rad,panjang;
	
	static void input()
	{
		Scanner masukan = new Scanner(System.in);
		rad = masukan.nextDouble();
		panjang = masukan.nextDouble();
	}
	static double hitArea()
	{
		return rad * rad * 3.14159;
	}
	public static void main(String[] args){
				
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		input();
		
		double vol, a;
		//perhitungan
		a = hitArea();
		vol = a * panjang;
		
		// cetak hasil
		System.out.println(""The area is "" + a);
		System.out.println(""The volume of the cylinder is "" + vol);		
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, method organization, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {
    public static double area(double r){
        double area;
        area=r*r*3.14159;
        return area;
    }
    public static double volume(double len,double a){
        double volume;
        volume=len*a;
        return volume;
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // Enter radius of the cylinder    
        double r,len,a;


        System.out.print(""Enter the radius and length of a cylinder: "");
        r = scan.nextDouble();
        len = scan.nextDouble();

        a = area(r);

        //Output
        System.out.println(""The area is "" + area(r));
        System.out.println(""The volume of the cylinder is "" + volume(len,a));

    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        
        double jejari, panjang;
        jejari = input.nextDouble();
        panjang = input.nextDouble();
        
        // Mencetak luas dan volume
        System.out.println(""The area is "" + hitungArea(jejari));
        System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));
        }
    
    public static double hitungArea(double jejari){
        double area;
        return area = jejari * jejari * 3.14159;
    }
    
    public static double hitungVolume(double panjang, double jejari){
        double volume;
        return volume = hitungArea(jejari) * panjang;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, comments, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 
{
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        double radius, tinggi;
        
        //masukkan nilai
        System.out.print(""Enter the radius and length of a cylinder: "");
        radius = input.nextDouble();
        tinggi = input.nextDouble();

        hitung(radius, tinggi);
    }

    private static void hitung(double radius, double tinggi) 
    {
        double area = radius * radius * 3.14159;
        double volume = radius * radius * 3.14159 * tinggi;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of a helper method in the second sample, and the addition of comments are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L5 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner in = new Scanner(System.in);
        //input radius
        float input = in.nextFloat();
        // Hitung Area
        double luas = hitungLuas(input);
        //input Length
        input = in.nextFloat();
        // Print area cylinder
        System.out.println(""The area is "" + luas);
        //Hitung Volume
        double volume = hitungVolume(luas, input);
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + volume);
    }
    
    private static double hitungLuas(float radius){
        return radius * radius * 3.14159;
    }
    
    private static double hitungVolume(double luas, float length){
        return luas * length;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;

public class L5 {

    public static double hitLuas(double jari2) {
        return jari2 * jari2 * 3.14159;
    }

    public static double total(double luas, double panjang) {
        return luas * panjang;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double jari2, panjang;
        double luas, total;
        System.out.print(""Enter the radius and length of a cylinder: "");
        jari2 = input.nextDouble();
        panjang = input.nextDouble();
        luas = hitLuas(jari2);
        total = total(luas, panjang);

        System.out.print(""The area is "" + luas + "" , "");
        System.out.println(""The volume of the cylinder is "" + total);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
5,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inout{

    public static void main(String[] args) {
        double rad,l,ar,vol;
        Scanner sc = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        rad = sc.nextDouble();//menginput radius
        l = sc.nextDouble();//menginput length
        ar = hitungAr(rad);//mencari area
        vol = hitungVol(ar,l);//mencari voulume
        System.out.println(""The area is "" + ar);//mengeluarkan hasil
        System.out.println(""The volume of the cylinder is "" + vol);//mengeluarkan hasil
     
    }
    
    public static double hitungVol(double ar,double l)
    {
        return ar*l;
    }
    
    public static double hitungAr(double rad)
    {
        return rad*rad*3.14159;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, comments, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            
            //Enter radius of the cylinder
            System.out.print(""Enter the radius and length of a cylinder: ""); 
            double radius = input.nextDouble();
            double length = input.nextDouble();
            
            double areas = radius * radius * 3.14159;
            double volumes = areas * length;
            
            System.out.println(""The area is "" + areas);
            System.out.println(""The volume of the cylinder is "" + volumes); }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor changes in variable names and the addition of a comment and author tag in the second sample. These differences are superficial and do not indicate independent development."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {
    
    public static double hitungArea(double r) {
        return r * r * Math.PI;
    }
    
    public static double hitungVolume(double area, double l) {
        return area * l;
    }
    
    public static void main(String[] args) {
        
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double r = input.nextDouble();
        double l = input.nextDouble();
        
        double area = hitungArea(r);
        double volume = hitungVolume(area, l);
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;
class inputoutput{
	public static void main(String[] args){
		Scanner masukan = new Scanner(System.in);
		
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double rad = masukan.nextDouble();
		double panjang = masukan.nextDouble();
		
		//perhitungan
		double a = rad * rad * 3.14159;
		double vol = a * panjang;
		
		// cetak hasil
		System.out.println(""The area is "" + a);
		System.out.println(""The volume of the cylinder is "" + vol);		
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // Enter radius of the cylinder    

        System.out.print(""Enter the radius and length of a cylinder: "");
        double r = scan.nextDouble();
        double len = scan.nextDouble();
        double a = r * r * 3.14159;
        double volume = a * len;
        //Output
        System.out.println(""The area is "" + a);
        System.out.println(""The volume of the cylinder is "" + volume);

    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double jejari = input.nextDouble();
        double length = input.nextDouble();
        double area = jejari * jejari * 3.14159;
        double volume = area * length;
        // Mencetak luas dan volume
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
        }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The only differences are in variable names and comments, which are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 {
    
    //program menghitung luas alas dan volume
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        
        System.out.print(""Enter the radius and length of a cylinder: "");
        double rad = in.nextDouble();
        double panjang = in.nextDouble();
        
        double luas = rad * rad * 3.14159;
        double vol = luas * panjang;
        System.out.println(""The area is "" + luas);
        System.out.println(""The volume of the cylinder is "" + vol);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L2 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        
        float radius = in.nextFloat();
        float length = in.nextFloat();
        // Hitung Area
        double luas = radius * radius * 3.14159;
        //Hitung Volume
        double volume = luas * length;
        // Print area cylinder
        System.out.println(""The area is "" + luas);
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + volume);
    }
    
}",True,,True,"The two code samples are very similar in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable types (double vs. float), variable names, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;


public class L2 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print(""Enter the radius and length of a cylinder: "");
        double jari2 = input.nextDouble();
        double panjang = input.nextDouble();
        double luas = jari2 * jari2 * 3.14159;
        double total = luas * panjang;
        System.out.println(""The area is "" + luas);
        System.out.println(""The volume of the cylinder is "" + total);
    }
}",True,,True,"The two code samples exhibit identical logic, structure, and functionality, with only superficial differences in variable names and minor formatting. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The level of similarity in the implementation details, including the exact calculations and output logic, strongly suggests that one code sample was derived from the other with minimal alterations, rather than being independently developed."
2,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inout{

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        double rad = sc.nextDouble();//menginput radius
        double l = sc.nextDouble();//menginput length
        double ar = rad*rad*3.14159;//mencari area
        double vol = ar*l;//mencari voulume
        System.out.println(""The area is "" + ar);//mengeluarkan hasil
        System.out.println(""The volume of the cylinder is "" + vol);//mengeluarkan hasil
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The differences in variable names and minor comments in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            
            //Enter radius of the cylinder
            System.out.print(""Enter the radius and length of a cylinder: ""); 
            double radius = input.nextDouble();
            double length = input.nextDouble();
            
            double area = radius * radius * 3.14159;
            double volume = area * length;
            
            System.out.println(""The area is "" + area);
            System.out.println(""The volume of the cylinder is "" + volume); }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are in the class names and the addition of a comment and author annotation in the second sample. These differences are superficial and do not indicate independent development."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder dddd
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;
public class inputoutput{
	public static void main(String[] args){
		Scanner input = new Scanner(System.in);
		
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();
		
		//perhitungan
		double area = radius * radius * 3.14159;
		double volume = area * length;
		
		// cetak hasil
		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);		
	}
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are in the class names and some comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder

        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = input.nextDouble();
        double length = input.nextDouble();
        double area = radius * radius * 3.14159;
        double volume = area * length;
        //Output
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);

    }
}",True,,False,
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = input.nextDouble();
        double length = input.nextDouble();
        double area = radius * radius * 3.14159;
        double volume = area * length;
        // Mencetak luas dan volume
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
        }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes and comments in the second sample. These differences are superficial and do not indicate independent development."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 {

    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        
        //masukkin radius
        System.out.print(""Enter the radius and length of a cylinder: "");
        double radius = input.nextDouble();
        double length = input.nextDouble();
        
        double area = radius * radius * 3.14159;
        double volume = area * length;
        System.out.println(""The area is "" + area);
        System.out.println(""The volume of the cylinder is "" + volume);
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L1 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        
        double radius = input.nextDouble();
        double length = input.nextDouble();
        // Hitung Area
        double area = radius * radius * 3.14159;
        //Hitung Volume
        double volume = area * length;
        // Print area cylinder
        System.out.println(""The area is "" + area);
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + volume);
    }
    
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes, comments, and the addition of a class-level comment block in the second sample. These differences are superficial and do not indicate independent development."
1,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inputoutput{

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        double radius = input.nextDouble();//menginput radius
        double length = input.nextDouble();//menginput length
        double area = radius*radius*3.14159;//mencari area
        double volume = area*length;//mencari voulume
        System.out.println(""The area is "" + area);//mengeluarkan hasil
        System.out.println(""The volume of the cylinder is "" + volume);//mengeluarkan hasil
    }

}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same formulas, and print the results with identical messages. The only differences are minor formatting changes and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static double radius,length,areas,volumes;
    
    public static void main(String[] args) {
        //Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner input = new Scanner(System.in);
        radius = input.nextDouble();
        length = input.nextDouble();
        areas = radius * radius * 3.14159;
        volumes = areas * length;
        cetak();
    }

    public static void cetak() {
        System.out.println(""The area is "" + areas);
        System.out.println(""The volume of the cylinder is "" + volumes);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of a helper method (`cetak`) in the second sample, and the addition of a class-level comment are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus2 {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        double r = input.nextDouble();
        double l = input.nextDouble();
        System.out.println(""The area is "" + r*r*Math.PI);
        System.out.println(""The volume of the cylinder is "" + r*r*Math.PI*l);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;

class inputoutput{
	static double rad,panjang;
	static Scanner masukan = new Scanner(System.in);
	static void input()
	{
		
		rad = masukan.nextDouble();
		panjang = masukan.nextDouble();
	}
	static double hitArea()
	{
		return Math.pow(rad,2) * 3.14159;
	}
	public static void main(String[] args){
				
		// masukan silinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		input();
		
		double vol, a;
		//perhitungan
		a = hitArea();
		vol = a * panjang;
		
		// cetak hasil
		System.out.println(""The area is "" + a);
		System.out.println(""The volume of the cylinder is "" + vol);		
	}
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, method organization, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

public class Main {
    public static double area(double r){
        double area;
        area=r*r*3.14159;
        return area;
    }
    public static double volume(double len,double a){
        double volume;
        volume=len*a;
        return volume;
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // Enter radius of the cylinder    
        double r,len,a;


        System.out.print(""Enter the radius and length of a cylinder: "");
        r = scan.nextDouble();
        len = scan.nextDouble();

        a = area(r);

        //Output
        System.out.println(""The area is "" + area(r));
        System.out.println(""The volume of the cylinder is "" + volume(len,a));

    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        // Masukan radius silinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        
        double jejari, panjang;
        jejari = input.nextDouble();
        panjang = input.nextDouble();
        
        // Mencetak luas dan volume
        System.out.println(""The area is "" + hitungArea(jejari));
        System.out.println(""The volume of the cylinder is "" + hitungVolume(panjang, jejari));
        }
    
    public static double hitungArea(double jejari){
        double area;
        return area = Math.pow(jejari, 2) * 3.14159;
    }
    
    public static double hitungVolume(double panjang, double jejari){
        double volume;
        return volume = hitungArea(jejari) * panjang;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, comments, and the use of helper methods in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        double radius, tinggi;

        //masukkan nilai
        System.out.print(""Enter the radius and length of a cylinder: "");
        radius = in.nextDouble(); tinggi = in.nextDouble();

        count(radius, tinggi);
    }

    private static void count(double rad, double height) {
        System.out.println(""The area is "" + Math.pow(rad, 2) * Math.PI);
        System.out.println(""The volume of the cylinder is "" + Math.pow(rad, 2) * Math.PI * height);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods in the second sample, and the use of `Math.pow` and `Math.PI` instead of direct multiplication are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other.

Plag"
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus2L6 {
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder: "");
        Scanner in = new Scanner(System.in);
        //input radius
        float input = in.nextFloat();
        //Hitung Area
        double luas = hitungLuas(input);
        //input Length
        input = in.nextFloat();
        // Print area cylinder
        System.out.println(""The area is "" + luas);
        // Print volume cylinder
        System.out.println(""The volume of the cylinder is "" + hitungVolume(luas, input));
    }
    
    private static double hitungLuas(float radius){
        return radius * radius * 3.14159;
    }
    
    private static double hitungVolume(double luas, float length){
        return luas * length;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods in the second sample, and minor formatting changes are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.*;

public class L6 {

    public static double hitLuas(double jari2) {
        return jari2 * jari2 * 3.14159;
    }

    public static double total(double luas, double panjang) {
        return luas * panjang;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        double jari2, panjang;
        double luas, total;
        jari2 = 0;
        panjang = 0;
        System.out.print(""Enter the radius and length of a cylinder: "");
        for (int i = 0; i < 1; i++) {
            jari2 = input.nextDouble();
            panjang = input.nextDouble();
        }

        luas = hitLuas(jari2);
        total = total(luas, panjang);

        System.out.print(""The area is "" + luas + "" , "");
        System.out.println(""The volume of the cylinder is "" + total);
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, the use of helper methods, and the addition of a for loop in the second sample are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
6,2,"import java.util.Scanner;

public class T2 {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);

		// Enter radius of the cylinder
		System.out.print(""Enter the radius and length of a cylinder: "");
		double radius = input.nextDouble();
		double length = input.nextDouble();

		double area = radius * radius * 3.14159;
		double volume = area * length;

		System.out.println(""The area is "" + area);
		System.out.println(""The volume of the cylinder is "" + volume);
	}

}","import java.util.Scanner;


public class inout{

    public static void main(String[] args) {
        double rad,l;
        Scanner sc = new Scanner(System.in);
        // Enter radius of the cylinder
        System.out.print(""Enter the radius and length of a cylinder : "");//untuk print
        rad = sc.nextDouble();//menginput radius
        l = sc.nextDouble();//menginput length
        hitungVol(hitungAr(rad), l);
        
     
    }
    
    public static void hitungVol(double ar,double l)
    {
        double vol= ar*l;
        System.out.println(""The volume of the cylinder is "" + vol);//mengeluarkan hasil
        
    }
    
    public static double hitungAr(double rad)
    {
        double ar= rad*rad*3.14159;
        System.out.println(""The area is "" + ar);//mengeluarkan hasil
        return ar;
    }
}",True,,True,"The two code samples exhibit significant similarities in their structure and logic. Both samples prompt the user to enter the radius and length of a cylinder, calculate the area and volume using the same mathematical formulas, and then print the results. The differences in variable names, method organization, and minor formatting are superficial and do not indicate independent development. The core logic and flow of the program are identical, suggesting that one sample was likely derived from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 685903EF83F7A7C8A165F77EED160D9E
 */
public class T05 {
    public static void main(String[] args) {
          Scanner s = new Scanner(System.in);
          System.out.print(""Enter an integer "");
          int a= s.nextInt();
          reverse(a);
    }
    public  static  void reverse(int number){
        String cek = String.valueOf(number);
        for (int i = 0; i < cek.length(); i++) {
            System.out.print(cek.charAt(cek.length()-1-i));
        }
        System.out.println("""");
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop to repeatedly extract and print the last digit of the number, while the second sample converts the number to a string and uses a for loop to print the characters in reverse order. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;
public class T05
{
   public static void main(String[] args)
   {
      Scanner sc = new Scanner(System.in);
      System.out.print(""Enter an integer: "");
      int number= sc.nextInt();

      reverse(number);
   }
   public static void reverse (int number)
   {
      String balik ="""";
      while(number > 0)
      {
         balik = balik + (number%10);
         number = number/ 10;
      }
      System.out.println(balik);
   }
}",False,,False,"The two code samples share the same high-level goal of reversing an integer input by the user, but they differ significantly in their implementation details. The first sample uses a `while` loop to print each digit of the number directly, while the second sample constructs a string (`balik`) to accumulate the reversed digits and then prints the string. The differences in approach and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author B00A50C448238A71ED479F81FA4D9066
 */

import java.util.Scanner;

public class T05 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int angka = sc.nextInt();
        reverse(angka);
    }
    
    public static void reverse(int number) {
        int tamp = number;
        int hit = 0;
        while(number != 0) {
            number = number / 10;
            hit++;
        }
        number = tamp;
        int jumlah = 0;
        for(int i = hit; i > 0; i--) {
            int jumlah10 = 1;
            int akhir = number % 10;
            for(int j = 1; j < i; j++) {
                jumlah10 = jumlah10 * 10;
            }
            jumlah = jumlah + (akhir * jumlah10);
            number = number / 10;
        }
        System.out.println(jumlah);
    }
}",False,,False,"The two code samples have different approaches to solving the problem of reversing an integer. The first sample uses a simple while loop to reverse the digits and print them directly. The second sample, however, uses a more complex approach involving multiple loops and additional calculations to achieve the same result. The differences in logic, structure, and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class Main {

    public  static void reverse(int number){
        String angka=number+"""";
        for(int i=angka.length()-1;i>=0;i--){
            System.out.print(angka.charAt(i));
        }
    }
    public static void main(String[] args) {
    	Scanner sc=new Scanner(System.in);
    	System.out.print(""Enter an integer: "");
    	int number=sc.nextInt();
    	reverse(number);
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop to repeatedly extract and print the last digit of the number, while the second sample converts the number to a string and uses a for loop to print the characters in reverse order. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/**
 *
 * @author C2FE677A63FFD5B7FFD8FACBF327DAD0
 */
public class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print(""Enter an integer: "");
        int number = sc.nextInt();

        reverse(number);
    }

    public static void reverse(int number)
    {
        int tempDigit = 0;

        while (number > 0){

            tempDigit = number % 10;
            System.out.print(tempDigit);
            number = number / 10;
        }
    }
}",False,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, minor formatting, and the addition of comments and import statements in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 51BE04B11C5F2F5AD96A396632DC3F76
 */
import java.util.Scanner;

public class t05 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int num = sc.nextInt();
        reverse(num);
    }

    public static void reverse(int number) {
        String tmpNumber = String.valueOf(number);
        for (int i = tmpNumber.length() - 1; i > -1; i--) {
            System.out.print(tmpNumber.charAt(i));
        }
        System.out.println("""");
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop and arithmetic operations to reverse the number, while the second sample converts the number to a string and uses a for loop to reverse the string. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6ED61D4B80BB0F81937B32418E98ADCA A94652AA97C7211BA8954DD15A3CF838
 */
public class T05 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int a = sc.nextInt();
        String b = String.valueOf(a);
        for (int i = 0; i < b.length(); i++) {
            System.out.print(b.charAt(b.length()-1-i));
        }
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop to repeatedly extract and print the last digit of the number, while the second sample converts the integer to a string and uses a for loop to print the characters in reverse order. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/**
 *
 * @author 92E0988C1682C76D4D307AA15EC8346E
 */
public class T05 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer : "");
        int number = sc.nextInt();
        reverse(number);
    }

    public static void reverse(int number) {
        String numberString = String.valueOf(number);        
        for (int i = numberString.length(); i > 0; i--) {
            System.out.print(numberString.charAt(i-1));
        }
        System.out.println("""");
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop and arithmetic operations to reverse the number, while the second sample converts the number to a string and uses a for loop to reverse the string. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;
/**
 *
 * @author FD820A2B4461BDDD116C1518BC4B0F77 871C87F67A53ECC7201FF41AF0A05032
 */
public class T05 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int inp = sc.nextInt();
        reverse(inp);
    }
    
    public static void reverse(int number){
        int a = 0;
        int i = (int)(Math.log10(number));
        while(number!=0){
            int b = number%10;
            a += b * Math.pow(10, i--);
            number/=10;
        }
        System.out.println(a);
    }
}",False,,False,"The two code samples share the same goal of reversing an integer, but they use different approaches to achieve this. The first sample uses a simple while loop to print each digit in reverse order, while the second sample uses a more complex approach involving logarithms and powers of 10 to reconstruct the reversed number. The differences in the methods used to reverse the number indicate independent development, despite the similarity in the problem being solved."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template fil3e, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 6968A2C57C3A4FEE8FADC79A80355E4D F13FFB0C4AF5E1CE7C646A5222FBC1E9 2451041557A22145B3701B0184109CAB035
 */
public class T05 {

    static int a;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer:"");
        int a = sc.nextInt();
        reverse(a);
    }

    public static void reverse(int number) {
        int reverse = 0;
        while (number != 0) {
            reverse = reverse * 10;
            reverse = reverse + number % 10;
            number = number / 10;
        }
        System.out.println(reverse);
    }
}",False,,False,"The two code samples share the same goal of reversing an integer input by the user, but they use different approaches to achieve this. The first sample prints each digit of the number in reverse order directly, while the second sample constructs the reversed number and then prints it. The differences in the approach and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/**
 *
 * @author 9BC88124A9BB1C629D5FFBCD81612170
 */
public class No5 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        String inp= sc.next();
        reverse(inp);
    }
    
    public static void reverse(String a){
        for(int i=a.length()-1; i>=0; i--) {
            System.out.print(a.charAt(i));
        }
    }
    
}",False,,False,"The two code samples achieve the same goal of reversing an integer input, but they use different approaches. The first sample reads an integer and uses a while loop to reverse it by extracting digits. The second sample reads the input as a string and uses a for loop to reverse it by iterating over the characters. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
0,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/**
 *
 * @author 4900D0A19B6894A4A514E9FF3AFCC2C0
 */
public class Soal5 {
    
    public static void reverse(int number){
        String a = String.valueOf(number);
        
        for(int i = a.length()-1; i>-1; i--){
            System.out.print(a.charAt(i));
        }
        System.out.println("""");
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int number = sc.nextInt();
        reverse(number);
    }
}",False,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop to repeatedly extract and print the last digit of the number, while the second sample converts the number to a string and uses a for loop to print the characters in reverse order. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        System.out.print(""Enter an integer: "");
        balik(number);
    }

        public static void balik(int number) {
            while (number != 0) {
                int remainder = number % 10;
                System.out.print(remainder);
                number = number / 10;
            }
            
            System.out.println();
        }
}",True,,False,
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus5 {
    
    public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}
    
    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        
        reverse(number);
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter an integer, then reverse the integer by extracting and printing each digit using a while loop. The only differences are in the class names and the order of method definitions, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//method reverse
		public static void beautyReverse(int num) 
	{
		while (num != 0)
			{
			int r = num % 10;
				System.out.print(r);
			num = num / 10;
		}
		System.out.println();
	}
	
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			java.util.Scanner input = new java.util.Scanner(System.in);
		int n = input.nextInt();
		//pamggil method
			beautyReverse(n);
	}
	
	

}",True,,False,"The two code samples exhibit similar logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. However, there are notable differences in the implementation. The second sample uses a method named `beautyReverse` and includes additional comments and a different class structure. These differences suggest that while the core logic is similar, the second sample has been independently developed or significantly modified from the first."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class Main {

    public static void main(String[] args) {
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int nmb=0;
        //enter the number
        System.out.print(""Enter an integer: "");

        nmb = sc.nextInt();
        //reverse number
        reverse(nmb);

    }
    public static void reverse(int nmb) {
        int get=0;
        while (nmb != 0) {
            get = nmb % 10;
            //output
            System.out.print(get);
            nmb = nmb / 10;
        }
        System.out.println();
    }


}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int angka;
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        reverse(angka);
    }

    public static void reverse(int angka) {
        // Di sini mengulang hingga number habis
        while (angka != 0) {
            int remainder = angka % 10;
            System.out.print(remainder);
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, comments, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level3 {

    public static void main(String[] args) {
        //cara lain memanggil scanner
        java.util.Scanner input = new java.util.Scanner(System.in);
        int angka;
        
        System.out.print(""Enter an integer: "");
        angka = input.nextInt();
        reverse(angka);
    }

    //fungsi membalik
    public static void reverse(int number) {
        int sisa;
        while (number != 0) {
            sisa = number % 10;
            System.out.print(sisa);
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, comments, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L3 {
    public static void main(String[] args) {
        //input data
        Scanner inp = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int angka = inp.nextInt();
        reverseNumber(angka);
    }

    public static void reverseNumber(int angka) {
        //proses membalikkan angka
        while (angka != 0) {
            //mengambil angka terakhir
            int temp = angka % 10;
            //membuang angka terakhir
            angka = angka / 10;
            //tampilkan angka yang diambil
            System.out.print(temp);
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, comments, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class L3 {

    public static void main(String[] args) 
    {
        int nomor = 0;
        System.out.print(""Enter an integer: "");
        
        java.util.Scanner input = new java.util.Scanner(System.in);
        
        nomor = input.nextInt();
        
        balik(nomor);
    }

    public static void balik(int nomor) {
        int sisa = 0 ;   
        while (nomor != 0)      
        {
                sisa = nomor % 10;
                System.out.print(sisa);
                nomor = nomor / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
3,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class fungsi {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        Scanner sc = new Scanner(System.in);
        int   input;
        input =    sc.nextInt();//input integer
        terbalik(input);//memanggil fungsi reverse
    }

    public static void terbalik(int angka)  {
        while (angka != 0) {//looping sampai angka habis
             int   sisa ;
             sisa= angka % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
            System.out.print(sisa);
            angka = angka / 10;
        }
        
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, minor formatting, and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int number;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.out.print(""Enter an integer: "");
        number = input.nextInt();
        while (number != 0) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }

        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the organization of the code and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus5 {
    
    public static void reverse(int number) {
        System.out.print(number%10);
    }
    
    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        
        for( ; number>0 ; number/=10)
            reverse(number);
        System.out.println("""");
    }
}",True,,False,"The two code samples share the same goal of reversing an integer and printing its digits, but they use different approaches. The first sample uses a while loop within the `reverse` method to repeatedly extract and print the last digit of the number. The second sample uses a for loop in the `main` method to call the `reverse` method, which prints the last digit of the number. The differences in approach, method structure, and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//method reverse
		public static void beautyReverse(int num) 
	{
		while (num != 0)
			{
			int r = num % 10;
				System.out.print(r);
			num = num / 10;
		}
		System.out.println();
	}
	static void reverse(int n)
	{
		beautyReverse(n);
	}
	
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			java.util.Scanner input = new java.util.Scanner(System.in);
		int n = input.nextInt();
		//pamggil method
			reverse(n);
	}
	
	

}",True,,True,"The two code samples exhibit significant similarities in their core logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. However, the second sample introduces additional methods and a different class structure, which adds some complexity. Despite these differences, the core logic and approach are the same, suggesting that one code sample was likely derived from the other with some modifications to the structure and method organization."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class Main {
    static java.util.Scanner sc = new java.util.Scanner(System.in);
    public static int input(){
        System.out.print(""Enter an integer: "");
        return sc.nextInt();
    }

    public static void main(String[] args) {

        int nmb=input();
        //reverse number
        reverse(nmb);

    }
    public static void reverse(int nmb) {
        int get=0;
        while (nmb != 0) {
            get = nmb % 10;
            //output
            System.out.print(get);
            nmb = nmb / 10;
        }
        System.out.println();
    }


}",True,,True,"The two code samples exhibit similar logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. However, the second sample introduces a static method for input and has a slightly different structure in terms of method organization and variable names. Despite these differences, the core logic and approach are the same, suggesting that one code sample was likely derived from the other with some modifications."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public class Main {

    public static void main(String[] args) {
        int angka;
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        while (angka != 0) {
            int remainder = angka % 10;
            System.out.print(remainder);
            angka = angka / 10;
        }
        System.out.println();
    }

}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level4 {

    public static void main(String[] args) {
        java.util.Scanner masukkan = new java.util.Scanner(System.in);
        int number;
        int sisaBagi;
        
        System.out.print(""Enter an integer: "");
        number = masukkan.nextInt();
        
        while (number != 0) {
            sisaBagi = number % 10;
            System.out.print(sisaBagi);
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit similar logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. However, the second sample does not use a separate method for the reverse operation and instead includes the logic directly in the main method. Additionally, there are differences in variable names and minor formatting. Despite these differences, the core logic and approach are the same, suggesting that one code sample was likely derived from the other with some modifications."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L4 {

    public static void main(String[] args) {
        //input data
        Scanner inp = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int angka = inp.nextInt();

        //proses membalikkan angka
        while (angka != 0) {
            //mengambil angka terakhir
            int temp = angka % 10;
            //membuang angka terakhir
            angka = angka / 10;
            //tampilkan angka yang diambil
            System.out.print(temp);
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit similar logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. However, the second sample does not use a separate method for reversing the number and includes additional comments and a different class structure. Despite these differences, the core logic and approach are the same, suggesting that one code sample was likely derived from the other with some modifications."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class L4 {

    public static void main(String[] args) 
    {
        int nomor = 0;
        System.out.print(""Enter an integer: "");
        
        java.util.Scanner input = new java.util.Scanner(System.in);
        
        nomor = input.nextInt();
        
        int sisa = 0 ;   
        while (nomor != 0)      
        {
                sisa = nomor % 10;
                System.out.print(sisa);
                nomor = nomor / 10;
        }
        System.out.println();
    }

}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
4,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class fungsi {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        Scanner sc = new Scanner(System.in);
        int   input;
        input =    sc.nextInt();//input integer
        while (input != 0) {//looping sampai angka habis
               int sisa ;
               sisa= input % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
               System.out.print(sisa);
               input = input / 10;
        }

    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int number;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.out.print(""Enter an integer: "");
        number = input.nextInt();
        for (int i = 0; number != 0; i++) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }

        System.out.println();
    }
}",True,,False,"The two code samples exhibit similar logic for reversing an integer, but they use different approaches. The first sample uses a separate method `reverse` with a while loop, while the second sample uses a for loop directly in the `main` method. The core logic of extracting and printing the last digit of the number is the same, but the differences in method structure and loop type suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus5 {
    
    public static int reverse(int number) {
        return number%10;
    }
    
    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        
        for( ; number>0 ; number/=10)
            System.out.print(reverse(number));
        System.out.println("""");
    }
}",True,,False,"The two code samples have different approaches to solving the problem of reversing an integer. The first sample uses a while loop within a separate method to reverse the number, while the second sample uses a for loop in the main method and a helper method to extract the last digit. The differences in the approach, structure, and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//method reverse
		public static void beautyReverse(int num) 
	{
		
		for(;num !=0;num/=10)
			{
			int r = num % 10;
				System.out.print(r);

		}
		System.out.println();
	}
	static void reverse(int n)
	{
		beautyReverse(n);
	}
	
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			java.util.Scanner input = new java.util.Scanner(System.in);
		int n = input.nextInt();
		//pamggil method
			reverse(n);
	}
	
	

}",True,,False,"The two code samples share the same core logic of reversing an integer and printing its digits. Both samples prompt the user to enter an integer, then use a loop to extract and print each digit in reverse order. However, the second sample introduces additional methods (`beautyReverse` and `reverse`) and uses a `for` loop instead of a `while` loop. These differences in structure and method organization suggest that while the core logic is similar, the second sample has been independently developed with a different approach to achieve the same functionality.

Plagiarized"
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static int input(){
        System.out.print(""Enter an integer: "");
        return sc.nextInt();
    }

    public static void main(String[] args) {

        int nmb=input();
        //reverse number
        reverse(nmb);

    }
    public static void reverse(int nmb) {
        int get=0;
        do {
            get = nmb % 10;
            //output
            System.out.print(get);
            nmb = nmb / 10;
        } while (nmb != 0);
        System.out.println();
    }


}",True,,False,"The two code samples share the same core logic of reversing an integer by repeatedly extracting the last digit using the modulo operation and then removing the last digit by dividing the number by 10. However, there are notable differences in their implementation. The first sample uses a `while` loop, while the second sample uses a `do-while` loop. Additionally, the second sample includes a separate method for input and uses a static `Scanner` object. These differences in structure and approach suggest that the code samples were independently developed to solve the same problem, rather than one being copied from the other.

Plag"
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int angka;
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        for (angka = angka; angka != 0; angka = angka / 10) {
            int remainder = angka % 10;
            System.out.print(remainder);
        }
        System.out.println();
    }

}",True,,False,"The two code samples exhibit similar logic and structure for reversing an integer, but they use different approaches. The first sample uses a separate method `reverse` to handle the reversal, while the second sample performs the reversal directly within the `main` method using a `for` loop. Despite these differences, the core logic of extracting the last digit using the modulo operation and removing the last digit by dividing the number by 10 is the same. However, the differences in method organization and the use of a `for` loop versus a `while` loop suggest that these code samples were independently developed to solve the"
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level5 {

    public static void main(String[] args) {
        Scanner masukkan = new Scanner(System.in);
        int angka, sisaBagi;

        System.out.print(""Enter an integer: "");
        angka = masukkan.nextInt();

        while (angka != 0) { //ulang sampai tidak bisa dibagi integer dengan 10
            sisaBagi = angka % 10;
            System.out.print(sisaBagi);
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L5 {
    
    public static void main(String[] args) {
        //input data
        Scanner inp = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        int angka = inp.nextInt();
        
        //proses membalikkan angka
        while (angka != 0) {
            //tampilkan angka yang diambil
            System.out.print(angka % 10);
            //membuang angka terakhir
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class L5 {

    public static void main(String[] args) 
    {
        int nomor, sisa = 0;
        System.out.print(""Enter an integer: "");
        
        java.util.Scanner input = new java.util.Scanner(System.in);
        
        nomor = input.nextInt();
      
        
        while (nomor!=0)    
        {
                sisa = nomor % 10;
                System.out.print(sisa);
                nomor = nomor / 10;
        }
        System.out.println();
    }

}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
5,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class fungsi {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        Scanner sc = new Scanner(System.in);
        int   input;
        input =    sc.nextInt();//input integer
        terbalik(input);//memanggil fungsi reverse
    }

    public static void terbalik(int angka)  {
        for(int i=0;i<=angka;i++) {//looping sampai angka habis
             int   sisa ;
             sisa= angka % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
            System.out.print(sisa);
            angka = angka / 10;
            i=0;
        }
        
        System.out.println();
    }
}",True,,False,"The two code samples share the same goal of reversing an integer, but they use different approaches. The first sample uses a `while` loop to repeatedly extract and print the last digit of the number, while the second sample uses a `for` loop with a different logic for the same purpose. The second sample also includes additional comments and a different method of calling the reverse function. These differences in approach and implementation details suggest that the code samples were independently developed to solve the same problem."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        balik(number);
    }

        public static void balik(int number) {
            while (number != 0) {
                int remainder = number % 10;
                System.out.print(remainder);
                number = number / 10;
            }
            
            System.out.println();
        }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the class names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			java.util.Scanner input = new java.util.Scanner(System.in);
		int n = input.nextInt();
		//pamggil method
			beautyReverse(n);
	}
	
	//method reverse
	public static void beautyReverse(int num) 
	{
		while (num != 0)
			{
			int r = num % 10;
				System.out.print(r);
			num = num / 10;
		}
		System.out.println();
	}
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, minor formatting, and the use of a method in the second sample. These differences are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class fungsi {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        Scanner sc = new Scanner(System.in);
        int    input =    sc.nextInt();//input integer
          terbalik(input);//memanggil fungsi reverse
    }

    public static void terbalik(int angka)  {
        while (angka != 0) {//looping sampai angka habis
             int   sisa = angka % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
            System.out.print(sisa);
            angka = angka / 10;
        }
        
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, minor formatting, and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class Main {

    public static void main(String[] args) {
        //enter the number
        System.out.print(""Enter an integer: "");
        java.util.Scanner sc = new java.util.Scanner(System.in);
        int nmb = sc.nextInt();
        //reverse number
        reverse(nmb);

    }
    public static void reverse(int nmb) {
        while (nmb != 0) {
            int get = nmb % 10;
            //output
            System.out.print(get);
            nmb = nmb / 10;
        }
        System.out.println();
    }


}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L2 {
    public static void main(String[] args) {
        //input data
        System.out.print(""Enter an integer: "");
        Scanner inp = new Scanner(System.in);
        int angka = inp.nextInt();
        reverseNumber(angka);
    }

    public static void reverseNumber(int angka) {
        //proses membalikkan angka
        while (angka != 0) {
            //mengambil angka terakhir
            int temp = angka % 10;
            //tampilkan angka yang diambil
            System.out.print(temp);
            //membuang angka terakhir
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, comments, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level2 {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner in = new java.util.Scanner(System.in);
        int angka = in.nextInt();
        balik(angka);
    }

    //fungsi membalik
    public static void balik(int angka) {
        while (angka != 0) {
            int sisa = angka % 10;
            System.out.print(sisa);
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class L2 {

    public static void main(String[] args) 
    {
        System.out.print(""Enter an integer: "");
        
        java.util.Scanner input = new java.util.Scanner(System.in);
        
        int nomor = input.nextInt();
        
        balik(nomor);
    }

    public static void balik(int nomor) {
           while (nomor != 0)
        {
                int sisa = nomor % 10;
                System.out.print(sisa);
                nomor = nomor / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
2,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int angka = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        reverse(angka);
    }

    public static void reverse(int angka) {
        // Di sini mengulang hingga number habis
        while (angka != 0) {
            int remainder = angka % 10;
            System.out.print(remainder);
            angka = angka / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, comments, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        reverse(number);
    }

        public static void reverse(int number) {
            while (number != 0) {
                int remainder = number % 10;
                System.out.print(remainder);
                number = number / 10;
            }
            
            System.out.println();
        }
}",True,,True,"The two code samples are identical in terms of structure, logic, and implementation. Both samples prompt the user to enter an integer, then reverse the integer by repeatedly extracting the last digit using the modulo operation and removing the last digit by dividing the number by 10. The only difference is the presence of a comment block in the second sample, which is superficial and does not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus5 {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        while (number != 0) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the presence of comments and the class name in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		//pamggil method
			reverse(number);
	}
	
	//method reverse
	public static void reverse(int number) 
	{
		while (number != 0)
			{
			int remainder = number % 10;
				System.out.print(remainder);
			number = number / 10;
		}
		System.out.println();
	}
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the class names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class Main {

    public static void main(String[] args) {
        //enter the number
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        //reverse number
        reverse(number);

    }
    public static void reverse(int number) {
        while (number != 0) {
            int remainder = number % 10;
            //output
            System.out.print(remainder);
            number = number / 10;
        }
        System.out.println();
    }


}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names, minor formatting, and comments, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        reverse(number);
    }

    public static void reverse(int number) {
        // Di sini mengulang hingga number habis
        while (number != 0) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in comments, class names, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level1 {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        reverse(number);
    }

    //fungsi membalik
    public static void reverse(int number) {
        while (number != 0) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples are nearly identical in terms of structure, logic, and implementation. Both samples prompt the user to enter an integer and then reverse the digits of the integer using the same logic. The only differences are minor formatting changes and the addition of comments in the second sample. These differences are superficial and do not indicate independent development."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L1 {
    public static void main(String[] args) {
        //input data
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        reverse(number);
    }
    public static void reverse(int number) {
        //proses membalikkan angka
        while (number != 0) {
            //mengambil angka terakhir
            int remainder = number % 10;
            //tampilkan angka yang diambil
            System.out.print(remainder);
            //membuang angka terakhir
            number = number / 10;
        }
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the comments, variable names, and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
1,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class method {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        java.util.Scanner input = new java.util.Scanner(System.in);
        int    number =    input.nextInt();//input integer
          reverse(number);//memanggil fungsi reverse
    }

    public static void reverse(int number)  {
        while (number != 0) {//looping sampai angka habis
             int   remainder = number % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
            System.out.print(remainder);
            number = number / 10;
        }
        
        System.out.println();
    }
}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in the addition of comments and minor formatting in the second sample, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/**
 *
 * @author 020A6EC1A4D0C5BDB29FF826A462DA1C5D88CF08B60A4744AFFD95C61A0C3C7E
 */
public class Main {
    private static int number;
    public static void main(String[] args) {
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.out.print(""Enter an integer: "");
        number = input.nextInt();
        for (int i = 99999; number != 0; i--) {
            int remainder = number % 10;
            System.out.print(remainder);
            number = number / 10;
        }

        System.out.println();
    }
}",True,,False,"The two code samples share the same core functionality of reversing an integer input by the user. However, they use different approaches to achieve this. The first sample uses a `while` loop within a separate `reverse` method, while the second sample uses a `for` loop directly within the `main` method. The second sample also includes additional elements like a class-level variable and a loop counter that is not directly related to the core logic of reversing the number. These differences in approach and implementation details suggest that the code samples were independently developed to solve the"
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author C166AB8FBBBE55174E16A67530426A8A 19011F43894F06E2BA0CA74061427469
 */
public class Kasus5 {
    
    public static void reverse(int number) {
        if(number>0) {
            System.out.print(number%10);
            reverse(number/=10);
        }
    }
    
    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        int number = input.nextInt();
        
        reverse(number);
        System.out.println("""");
    }
}",True,,False,"The two code samples share the same goal of reversing an integer and printing the result, but they use different approaches to achieve this. The first sample uses an iterative approach with a while loop, while the second sample uses a recursive approach. The differences in the method of reversing the number and the overall structure of the code suggest that these samples were independently developed to solve the same problem, rather than one being copied from the other."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.*;

class method{
	//method reverse
	static java.util.Scanner input = new java.util.Scanner(System.in);
		public static void beautyReverse(int num) 
	{
		
		for(;num >0;num/=100*10)
			{

				System.out.print(num % 10);

		}
		System.out.println();
	}
	static void reverse()
	{
		int n = input.nextInt();
		beautyReverse(n);
	}
	
	//prog utama
	public static void main(String[] args) 
	{
			System.out.print(""Enter an integer: "");
			
		
		//pamggil method
			reverse();
	}
	
	

}",True,,False,"The two code samples have different structures and approaches to solving the problem of reversing an integer. The first sample uses a while loop to reverse the digits of the number, while the second sample uses a for loop within a method called `beautyReverse` and another method `reverse` to handle input. The second sample also includes additional complexity and different logic for reversing the number. These differences in approach and implementation details suggest that the code samples were independently developed."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

public class Main {
    static Scanner sc = new Scanner(System.in);
    public static int input(){
        System.out.print(""Enter an integer: "");
        return sc.nextInt();
    }

    public static void main(String[] args) {

        int nmb=input();
        //reverse number
        reverse(nmb);

    }
    public static void reverse(int nmb) {
        int x=1;
        String rev=String.valueOf(nmb);
        do {

            System.out.print(rev.charAt(rev.length()-x));
            x++;
            nmb = nmb / 10;
        } while (nmb != 0);
        System.out.println();
    }
}",True,,False,"The two code samples have different approaches to solving the problem of reversing an integer. The first sample uses a while loop and arithmetic operations to reverse the number, while the second sample converts the number to a string and uses a do-while loop to print the characters in reverse order. The differences in approach, logic, and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E3AFED0047B08059D0FADA10F400C1E5
 */
public class Main {

    public static void main(String[] args) {
        int angka;
        System.out.print(""Enter an integer: "");
        java.util.Scanner input = new java.util.Scanner(System.in);
        angka = input.nextInt();
        // Memanggil fungsi reverse untuk membalik nilai yang dihasilkan
        for (angka = angka; angka > 0; angka = angka / 10) {
            int remainder = angka % 10;
            System.out.print(remainder);
        }
        System.out.println();
    }

}",True,,False,"The two code samples exhibit similar logic and structure for reversing an integer, but they use different approaches. The first sample uses a `while` loop and a separate method to reverse the number, while the second sample uses a `for` loop within the `main` method to achieve the same result. The differences in loop structure and method organization suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.Scanner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author FD8DBE9073AFCC0504CD6901E1091CAD
 */
public class Level6 {

    public static void main(String[] args) {
        System.out.print(""Enter an integer: "");
        Scanner input = new Scanner(System.in);
        int bil = input.nextInt();

        rekursif(bil);
        System.out.println("""");
    }

    //rekursif ah...
    public static int rekursif(int bil){
        if(bil!=0){
            int sisaMod = bil % 10;
            System.out.print(sisaMod);
            bil = bil / 10;
            rekursif(bil);
        }
        return bil;
    }
}",True,,False,"The two code samples share the same goal of reversing an integer input by the user, but they use different approaches to achieve this. The first sample uses an iterative approach with a while loop, while the second sample uses a recursive method. The differences in approach and implementation details suggest that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Scanner;

/**
 *
 * @author B15130F5DDB6B5F1622EF91DAC4C1AAE
 */
public class Kasus5L6 {

    public static void main(String[] args) {
        //input data
        Scanner inp = new Scanner(System.in);
        System.out.print(""Enter an integer: "");
        String angka = inp.next();
        for (int i = angka.length() - 1; i >= 0; i--) {
            System.out.print(angka.charAt(i));
        }
        System.out.println();
    }
}",True,,False,"The two code samples achieve the same goal of reversing an integer input by the user, but they use different approaches. The first sample uses a while loop and integer arithmetic to reverse the number, while the second sample uses a for loop and string manipulation to achieve the same result. The difference in approach and implementation details suggests that these code samples were independently developed to solve the same problem, rather than one being copied from the other."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","public class L6_fix {

    public static void main(String[] args) 
    {
        int nomor, sisa = 0;
        System.out.print(""Enter an integer: "");       
        java.util.Scanner input = new java.util.Scanner(System.in);
        
        nomor = input.nextInt();
      
        
        while (nomor!=0)    
        {
            if (nomor!=0){
                sisa = nomor % 10;
                System.out.print(sisa);
                nomor = nomor / 10;}
        }
        System.out.println();
    }

}",True,,True,"The two code samples exhibit identical logic and structure for reversing an integer. Both use a while loop to repeatedly extract the last digit of the number using the modulo operation and then remove the last digit by dividing the number by 10. The only differences are in variable names and minor formatting, which are superficial and do not indicate independent development. The core logic and approach are the same, suggesting that one code sample was derived from the other with minimal changes."
6,5,"public class T5 {
	public static void main(String[] args) {
		System.out.print(""Enter an integer: "");
		java.util.Scanner input = new java.util.Scanner(System.in);
		int number = input.nextInt();
		reverse(number);
	}

	public static void reverse(int number) {
		while (number != 0) {
			int remainder = number % 10;
			System.out.print(remainder);
			number = number / 10;
		}

		System.out.println();
	}

}","import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class fungsi {

    public static void main(String[] args) {
         System.out.print(""Enter an integer: "");
        
        Scanner sc = new Scanner(System.in);
        int   input;
        input =    sc.nextInt();//input integer
        terbalik(input);//memanggil fungsi reverse
    }

    public static void terbalik(int angka)  {
        List arr =new ArrayList();
        for(int i=0;i<=angka;i++) {//looping sampai angka habis
             int   sisa ;
             sisa= angka % 10;//membagi bilangan tersebut dengan 0 sampai tidak ada hasil bagi
             arr.add(sisa);
             angka = angka / 10;
             i=0;
        }
        for(int i=0;i<arr.size();i++)
        {
            System.out.print(arr.get(i));
        }
        
        System.out.println();
    }
}",True,,False,"The two code samples share the same goal of reversing an integer input by the user, but they use different approaches to achieve this. The first sample uses a simple while loop to reverse the number and print each digit directly. The second sample, however, uses a for loop to store the digits in an ArrayList and then prints the digits from the list. The differences in approach, including the use of an ArrayList and the looping mechanism, suggest that these code samples were independently developed to solve the same problem."
