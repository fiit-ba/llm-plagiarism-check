{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T3 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in); \/\/ Prompt the user to enter weight in pounds  System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); \/\/ Prompt the user to enter height  System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble(); double height = feet * 12 + inches; \/\/ Compute BMI  double bmi = weight * 0.45359237 \/ ((height * 0.0254) * (height * 0.0254)); \/\/ Display result  System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5)  System.out.println(\"Underweight\");  else if (bmi < 25)  System.out.println(\"Normal\");  else if (bmi < 30)  System.out.println(\"Overweight\");  else  System.out.println(\"Obese\");  } }",
        "code_sample_2": "import java.util.Scanner; public class L1 { public static void main(String[] args) {  Scanner input = new Scanner(System.in); System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble();  double height = feet * 12 + inches; double bmi = weight * 0.45359237  \/ ((height * 0.0254) * (height * 0.0254)); System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5) {  System.out.println(\"Underweight\");  } else if (bmi < 25) {  System.out.println(\"Normal\");  } else if (bmi < 30) {  System.out.println(\"Overweight\");  } else {  System.out.println(\"Obese\");  }  } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific implementation details of both samples.",
        "explanation": "The two code samples exhibit nearly identical structure, logic, and implementation for calculating BMI, including the same user prompts, BMI calculation formula, and categorization thresholds. The minor differences in formatting and code style do not significantly alter the core functionality, strongly suggesting that one sample was derived from the other or both were based on a common source.",
        "plagiarized": "Yes"
      },
      {
        "augmented": true,
        "code_sample_1": "public class T5 {  public static void main(String[] args) {   System.out.print(\"Enter an integer: \");   java.util.Scanner input = new java.util.Scanner(System.in);   int number = input.nextInt();   reverse(number);  }  public static void reverse(int number) {   while (number != 0) {    int remainder = number % 10;    System.out.print(remainder);    number = number \/ 10;   }   System.out.println();  } }",
        "code_sample_2": "public class L6_fix { public static void main(String[] args)  { int nomor, sisa = 0; System.out.print(\"Enter an integer: \");  java.util.Scanner input = new java.util.Scanner(System.in); nomor = input.nextInt(); while (nomor!=0) { if (nomor!=0){ sisa = nomor % 10; System.out.print(sisa); nomor = nomor \/ 10;} } System.out.println(); } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific implementation details of both samples.",
        "explanation": "The two code samples exhibit nearly identical logic, structure, and functionality for reversing an integer, including the same approach to input, digit extraction, and output. Despite minor differences in variable names and method organization, the core algorithm and even some verbatim code segments are so similar that it strongly suggests one sample was derived from the other or both from a common source, indicating likely plagiarism.",
        "plagiarized": "Yes"
      },
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T3 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in); \/\/ Prompt the user to enter weight in pounds  System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); \/\/ Prompt the user to enter height  System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble(); double height = feet * 12 + inches; \/\/ Compute BMI  double bmi = weight * 0.45359237 \/ ((height * 0.0254) * (height * 0.0254)); \/\/ Display result  System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5)  System.out.println(\"Underweight\");  else if (bmi < 25)  System.out.println(\"Normal\");  else if (bmi < 30)  System.out.println(\"Overweight\");  else  System.out.println(\"Obese\");  } }",
        "code_sample_2": "import java.util.*; public class L4 { public static double hitBmi(double berat, double tinggi) { return berat * 0.45359237 \/ ((tinggi * 0.0254) * (tinggi * 0.0254)); } public static void main(String[] args) { Scanner sc = new Scanner(System.in); double berat = 0; double inci = 0; double tinggi = 0 ;  double feet = 0; System.out.print(\"Enter weight in pounds: \"); berat = sc.nextDouble(); System.out.print(\"Enter feet: \"); feet = sc.nextDouble(); System.out.print(\"Enter inches: \"); inci = sc.nextDouble();  tinggi = feet * 12 + inci; System.out.println(\"BMI is \" + hitBmi(berat,tinggi)); if (hitBmi(berat,tinggi) < 18.5) { System.out.println(\"Underweight\"); } else if (hitBmi(berat,tinggi) < 25) { System.out.println(\"Normal\"); } else if (hitBmi(berat,tinggi) < 30) { System.out.println(\"Overweight\"); } else { System.out.println(\"Obese\"); } } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We start by comparing the structure, logic, and specific details of the code.",
        "explanation": "The two code samples share significant structural similarities, including identical input prompts, BMI calculation formulas, and output formats, which strongly suggest that one was derived from the other. However, the second sample shows evidence of modification, such as translated variable names and a reorganized code structure with a separate function for BMI calculation, indicating it's not a direct copy but rather a closely inspired adaptation.",
        "plagiarized": "Yes"
      },
      {
        "augmented": true,
        "code_sample_1": "public class T4 {  public static void main(String[] args) {   System.out.println(\"Miles\\t\\tKilometers\");   System.out.println(\"-------------------------------\");   \/\/ Use while loop   int miles = 1;   while (miles <= 10) {    System.out.println(miles + \"\\t\\t\" + miles * 1.609);    miles++;   }  } }",
        "code_sample_2": "\/**  *  * @author 65FBEF05E01FAC390CB3FA073FB3E8CF (452BF208BF901322968557227B8F6EFE010)  *\/ public class T04 { public static void main(String[] args) { System.out.println(\"Miles  Kilometers\"); for (int i = 1; i <= 10; i++) { if (i == 10) { System.out.println(i + \" \" + i * 1609); } else { System.out.println(i + \"  \" + i * 1609); } } } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific implementation details of both samples.",
        "explanation": "The two code samples aim to achieve the same task of converting miles to kilometers and displaying the results. However, they exhibit significant differences in their approach and implementation. The first sample uses a `while` loop and includes a formatted table header, while the second sample uses a `for` loop and lacks the table header. Additionally, the second sample contains an unnecessary `if` condition that does not affect the output. These differences suggest that the code samples are independent implementations of the same problem rather than instances of plagiarism.",
        "plagiarized": "No"
      },
      {
        "code_sample_1": "public class T6 {  public static void main(String[] args) {   java.util.Scanner input = new java.util.Scanner(System.in);   int[] num = new int[10];   for (int i = 0; i < 10; i++) {    \/\/ Read a number    System.out.print(\"Read a number: \");    num[i] = input.nextInt();   }   \/\/ Display the array   for (int i = 9; i >= 0; i--) {    System.out.println(num[i]);   }  } }",
        "code_sample_2": "import java.util.*; public class L5 { public static void print(int[] arr) { int i = 9; while (i >= 0) { System.out.println(arr[i]); i--; } } public static void main(String[] args) { int[] angka = new int[10]; Scanner sc = new java.util.Scanner(System.in); int i = 0; while (i != 10) { System.out.print(\"Read a number: \"); angka[i] = sc.nextInt(); i++; } print(angka); } }",
        "plagiarized": "Yes",
        "explanation": "These code samples exhibit clear signs of plagiarism due to their identical core logic, specific implementation choices, and the use of the exact same unique input prompt \"Read a number: \". While there are superficial differences in loop structures and method organization, these appear to be attempts to disguise the copying rather than indications of independent work."
      },
      {
        "code_sample_1": "import java.util.Scanner; public class T7 {  public static void main(String[] args) {   Scanner input = new Scanner(System.in);   System.out.print(\"Enter a 4 by 4 matrix row by row: \");   double[][] m = new double[4][4];   for (int i = 0; i < 4; i++)    for (int j = 0; j < 4; j++)     m[i][j] = input.nextDouble();   System.out.print(\"Sum of the elements in the major diagonal is \" + sumMajorDiagonal(m));  }  public static double sumMajorDiagonal(double[][] m) {   double sum = 0;   for (int i = 0; i < m.length; i++)    sum += m[i][i];   return sum;  } }",
        "code_sample_2": "import java.util.*; public class L3 { public static double jumlahDiagonal(double[][] m) { double sum = 0; for (int i = 0; i < m.length; i++) { sum += m[i][i]; } return sum; } public static void main(String[] args) { Scanner sc = new Scanner(System.in); double[][] m = new double[4][4]; System.out.print(\"Enter a 4 by 4 matrix row by row: \"); for (int i = 0; i < 4; i++) { for (int j = 0; j < 4; j++) { m[i][j] = sc.nextDouble(); } } System.out.print(\"Sum of the elements in the major diagonal is \" + jumlahDiagonal(m)); } }",
        "plagiarized": "Yes",
        "explanation": "The two code samples exhibit nearly identical structure, logic, and implementation for solving the same problem, with only minor differences in variable names and method naming. The high degree of similarity in both the overall approach and specific code details, including the exact same matrix size and input prompts, strongly suggests that one sample was derived from the other with only superficial modifications."
      },
      {
        "code_sample_1": "import java.util.Scanner;  public class T2 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in);   \/\/ Enter radius of the cylinder  System.out.print(\"Enter the radius and length of a cylinder: \");  double radius = input.nextDouble();  double length = input.nextDouble();   double area = radius * radius * 3.14159;  double volume = area * length;   System.out.println(\"The area is \" + area);  System.out.println(\"The volume of the cylinder is \" + volume);  }  }",
        "code_sample_2": "import java.util.*; public class L3 { public static void main(String[] args) {  Scanner input = new Scanner(System.in);  double jari2 = 0;  double panjang = 0;  System.out.print(\"Enter the radius and length of a cylinder: \");  jari2 = input.nextDouble();  panjang = input.nextDouble();  double luas = jari2 * jari2 * 3.14159;  double total = luas * panjang;  System.out.print(\"The area is \" + luas + \" , \");  System.out.println(\"The volume of the cylinder is \" + total);  } }",
        "plagiarized": "Yes",
        "explanation": "The code samples exhibit nearly identical structure, logic, and even specific wording in key areas such as user prompts and output statements, which is unlikely to occur independently. Despite minor differences in variable names and formatting, the overall similarity in implementation, including the use of the same mathematical constant (3.14159) and calculation methods, strongly suggests that one code sample was derived from the other or both were derived from a common source."
      },
      {
        "code_sample_1": "public class T5 {  public static void main(String[] args) {   System.out.print(\"Enter an integer: \");   java.util.Scanner input = new java.util.Scanner(System.in);   int number = input.nextInt();   reverse(number);  }  public static void reverse(int number) {   while (number != 0) {    int remainder = number % 10;    System.out.print(remainder);    number = number \/ 10;   }   System.out.println();  } }",
        "code_sample_2": "import java.util.Scanner; \/**  *  * @author 65FBEF05E01FAC390CB3FA073FB3E8CF (452BF208BF901322968557227B8F6EFE010)  *\/ public class T05 { public static void main(String[] args) { Scanner s = new Scanner(System.in); System.out.print(\"Enter a integer: \"); int a = s.nextInt(); reverse(a); } public static void reverse(int number) { String temp=String.valueOf(number); for(int i=temp.length();i>0;i--){ System.out.print(temp.charAt(i-1)); } } }",
        "plagiarized": "No",
        "explanation": "The two code samples have different implementations for the reverse method, with Sample 1 using modulo arithmetic and Sample 2 using string manipulation, indicating distinct approaches to solving the problem. Additionally, the coding styles, variable names, and overall structure differ sufficiently to suggest these are independent solutions rather than a case of direct copying."
      }
    ],
    "signature_instructions": "Detect if two code samples are plagiarized. In plagiarized field answer only : Yes if the code samples are plagiarized, No otherwise. In explenation field add the reason why the code samples are\/ are not plagiarized.",
    "signature_prefix": "Plagiarized:",
    "extended_signature_instructions": "Detect if two code samples are plagiarized. In plagiarized field answer only : Yes if the code samples are plagiarized, No otherwise. In explenation field add the reason why the code samples are\/ are not plagiarized.",
    "extended_signature_prefix": "Plagiarized:"
  }
}