{
  "prog": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T7 {  public static void main(String[] args) {   Scanner input = new Scanner(System.in);   System.out.print(\"Enter a 4 by 4 matrix row by row: \");   double[][] m = new double[4][4];   for (int i = 0; i < 4; i++)    for (int j = 0; j < 4; j++)     m[i][j] = input.nextDouble();   System.out.print(\"Sum of the elements in the major diagonal is \" + sumMajorDiagonal(m));  }  public static double sumMajorDiagonal(double[][] m) {   double sum = 0;   for (int i = 0; i < m.length; i++)    sum += m[i][i];   return sum;  } }",
        "code_sample_2": "import java.util.*; public class L5 { public static double jumlahDiagonal(double[][] m) { double sum = 0; int hit = 0; while (hit != m.length) { sum += m[hit][hit]; hit++; } return sum; } public static void print(double[][] m) { System.out.print(\"Sum of the elements in the major diagonal is \" + jumlahDiagonal(m)); } public static void main(String[] args) { Scanner sc = new Scanner(System.in); double[][] m = new double[4][4]; System.out.println(\"Enter a 4 by 4 matrix row by row: \"); for (int i = 0; i < 4; i++) { for (int j = 0; j < 4; j++) { m[i][j] = sc.nextDouble(); } } print(m); } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the core logic, structure, and output of both samples.",
        "explanation": "The two code samples exhibit nearly identical logic and structure for summing the major diagonal of a 4x4 matrix. Both samples use a nested loop to populate the matrix and a method to sum the diagonal elements, with only minor differences in variable names and loop constructs (for loop vs. while loop). The output messages are also very similar, indicating that one sample was likely derived from the other or both were derived from a common source. These similarities are too significant to be coincidental, suggesting plagiarism.",
        "plagiarized": "Yes"
      },
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner;  public class T2 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in);   \/\/ Enter radius of the cylinder  System.out.print(\"Enter the radius and length of a cylinder: \");  double radius = input.nextDouble();  double length = input.nextDouble();   double area = radius * radius * 3.14159;  double volume = area * length;   System.out.println(\"The area is \" + area);  System.out.println(\"The volume of the cylinder is \" + volume);  }  }",
        "code_sample_2": "import java.util.Scanner; \/**  *  * @author CB6AB3315634A1E4D11B091BA48B60BA  *\/ public class Nomor2_2451041557A22145B3701B0184109CAB013 {   \/**  * @param args the command line arguments  *\/  public static void main(String[] args) {  Scanner sc = new Scanner(System.in);  System.out.print(\"Enter the radius and length of a cylinder : \");  double radius = sc.nextDouble();  double length = sc.nextDouble();  double area = (radius * radius) * 3.14159;  double volume = area * length;  System.out.println(\"The area is : \" + area);  System.out.println(\"The volume is : \" + volume);  }  }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific details of the implementation.",
        "explanation": "These code samples are not considered plagiarism because, although they solve the same problem and have similar logic, they exhibit differences in coding style, variable naming, and formatting. The differences in comments, author tags, and slight variations in the calculation and output formatting suggest independent development rather than direct copying.",
        "plagiarized": "No"
      },
      {
        "augmented": true,
        "code_sample_1": "public class T4 {  public static void main(String[] args) {   System.out.println(\"Miles\\t\\tKilometers\");   System.out.println(\"-------------------------------\");   \/\/ Use while loop   int miles = 1;   while (miles <= 10) {    System.out.println(miles + \"\\t\\t\" + miles * 1.609);    miles++;   }  } }",
        "code_sample_2": "\/**  *  * @author CB6AB3315634A1E4D11B091BA48B60BA  *\/ public class Nomor4_2451041557A22145B3701B0184109CAB013 { \/**  * @param args the command line arguments  *\/ public static void main(String[] args) { System.out.println(\"Miles \\t Kilometers\"); for(int i = 1 ; i<=10;i++){ System.out.println(i+\" \\t \"+i*1.069); } } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the core logic, structure, and output of both samples.",
        "explanation": "These code samples are not plagiarized. Although both samples aim to convert miles to kilometers and print the results, they have significant differences in their implementation. Code Sample 1 uses a `while` loop and a conversion factor of 1.609, while Code Sample 2 uses a `for` loop and a different conversion factor of 1.069. The differences in loop structure, conversion factors, and minor formatting variations indicate independent implementations.",
        "plagiarized": "No"
      },
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T3 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in); \/\/ Prompt the user to enter weight in pounds  System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); \/\/ Prompt the user to enter height  System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble(); double height = feet * 12 + inches; \/\/ Compute BMI  double bmi = weight * 0.45359237 \/ ((height * 0.0254) * (height * 0.0254)); \/\/ Display result  System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5)  System.out.println(\"Underweight\");  else if (bmi < 25)  System.out.println(\"Normal\");  else if (bmi < 30)  System.out.println(\"Overweight\");  else  System.out.println(\"Obese\");  } }",
        "code_sample_2": "import java.util.Scanner; \/**  *  * @author 65FBEF05E01FAC390CB3FA073FB3E8CF (452BF208BF901322968557227B8F6EFE010)  *\/ public class T03 { public static void main(String[] args) { Scanner s = new Scanner(System.in); System.out.print(\"Enter weight in pounds: \"); float w=s.nextFloat(); System.out.print(\"Enter feet: \"); float f=s.nextFloat(); System.out.print(\"Enter inches: \"); float i=s.nextFloat(); float h=f*12+i; float bmi = (float) ((w*0.45359237)\/((h*0.0254)*(h*0.0254))); System.out.println(\"BMI is \"+bmi); if(bmi<18.5){ System.out.println(\"Underweight\"); } else if (bmi>=18.5 && bmi<25){ System.out.println(\"Normal\"); } else if (bmi>=25 && bmi<35){ System.out.println(\"Overweight\"); } else if (bmi>=35) { System.out.println(\"Obese\"); } } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific details of the implementation.",
        "explanation": "These code samples are not plagiarized because, although they solve the same problem (calculating BMI), they use different data types (double vs. float), have different variable names, and exhibit distinct coding styles. The conditional statements also differ slightly in their structure and range checks. These differences suggest independent development rather than direct copying.",
        "plagiarized": "No"
      },
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T3 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in); \/\/ Prompt the user to enter weight in pounds  System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); \/\/ Prompt the user to enter height  System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble(); double height = feet * 12 + inches; \/\/ Compute BMI  double bmi = weight * 0.45359237 \/ ((height * 0.0254) * (height * 0.0254)); \/\/ Display result  System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5)  System.out.println(\"Underweight\");  else if (bmi < 25)  System.out.println(\"Normal\");  else if (bmi < 30)  System.out.println(\"Overweight\");  else  System.out.println(\"Obese\");  } }",
        "code_sample_2": "import java.util.Scanner; \/** * * @author CB6AB3315634A1E4D11B091BA48B60BA *\/ public class Nomor3_2451041557A22145B3701B0184109CAB013 { \/** * @param args the command line arguments \/  public static void main(String[] args) {  Scanner sc = new Scanner(System.in);  System.out.print(\"Enter weight in pounds: \");  int weight = sc.nextInt();  System.out.print(\"Enter feet: \");  int feet = sc.nextInt();  System.out.print(\"Enter inch: \");  int inches = sc.nextInt();  int height = feet12 + inches;  double bmi = weight0.45359237\/((height0.0254)(height0.0254));  System.out.println(\"BMI is \" + bmi);  if(bmi<18.5){  System.out.println(\"underweight\");  }  else if(bmi>=18.5 && bmi<25){  System.out.println(\"Normal\");  }  else if(bmi>=25 && bmi<35){  System.out.println(\"overweight\");  }  else if(bmi >35){  System.out.println(\"obese\");  }  } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific details of the implementation.",
        "explanation": "These code samples are not plagiarized because they exhibit significant differences in their implementation details, including variable types, calculation methods, and conditional checks. While they solve the same problem (calculating BMI), the differences in coding style, variable names, and specific logic indicate independent development rather than direct copying.",
        "plagiarized": "No"
      },
      {
        "augmented": true,
        "code_sample_1": "public class T5 {  public static void main(String[] args) {   System.out.print(\"Enter an integer: \");   java.util.Scanner input = new java.util.Scanner(System.in);   int number = input.nextInt();   reverse(number);  }  public static void reverse(int number) {   while (number != 0) {    int remainder = number % 10;    System.out.print(remainder);    number = number \/ 10;   }   System.out.println();  } }",
        "code_sample_2": "import java.util.Scanner; \/**  *  * @author CB6AB3315634A1E4D11B091BA48B60BA  *\/ public class Nomor5_2451041557A22145B3701B0184109CAB013 { \/**  * @param args the command line arguments  *\/ public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(\"Enter an integer : \"); int number = sc.nextInt(); reverse(number); } public static void reverse(int number){ String strNumber = Integer.toString(number); String temp = \"\"; for(int i = strNumber.length(); i>0;i--){ temp +=i; } int tempNumber = Integer.parseInt(temp); System.out.println((tempNumber)); } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the core logic, structure, and implementation details of both samples.",
        "explanation": "The two code samples have different implementations for the reverse method. Sample 1 uses modulo arithmetic to reverse the digits of the number, while Sample 2 converts the number to a string and then manipulates the string to reverse it. Additionally, the coding styles, variable names, and overall structure differ significantly, indicating that these are independent solutions to the same problem rather than one being derived from the other.",
        "plagiarized": "No"
      },
      {
        "augmented": true,
        "code_sample_1": "import java.util.Scanner; public class T3 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in); \/\/ Prompt the user to enter weight in pounds  System.out.print(\"Enter weight in pounds: \");  double weight = input.nextDouble(); \/\/ Prompt the user to enter height  System.out.print(\"Enter feet: \");  double feet = input.nextDouble();  System.out.print(\"Enter inches: \");  double inches = input.nextDouble(); double height = feet * 12 + inches; \/\/ Compute BMI  double bmi = weight * 0.45359237 \/ ((height * 0.0254) * (height * 0.0254)); \/\/ Display result  System.out.println(\"BMI is \" + bmi);  if (bmi < 18.5)  System.out.println(\"Underweight\");  else if (bmi < 25)  System.out.println(\"Normal\");  else if (bmi < 30)  System.out.println(\"Overweight\");  else  System.out.println(\"Obese\");  } }",
        "code_sample_2": "import java.util.*; public class L5 { public static double hitBmi(double berat, double tinggi) { return berat * 0.45359237 \/ ((tinggi * 0.0254) * (tinggi * 0.0254)); } public static void main(String[] args) { Scanner sc = new Scanner(System.in); double berat, inci, tinggi, feet = 0; System.out.print(\"Enter weight in pounds: \"); berat = sc.nextDouble(); System.out.print(\"Enter feet: \"); feet = sc.nextDouble(); System.out.print(\"Enter inches: \"); inci = sc.nextDouble(); tinggi = feet * 12 + inci; System.out.println(\"BMI is \" + hitBmi(berat, tinggi)); if (hitBmi(berat, tinggi) < 18.5) { System.out.println(\"Underweight\"); } else if (hitBmi(berat, tinggi) < 25) { System.out.println(\"Normal\"); } else if (hitBmi(berat, tinggi) < 30) { System.out.println(\"Overweight\"); } else { System.out.println(\"Obese\"); } } }",
        "rationale": "Reasoning: Let's think step by step in order to determine if the code samples are plagiarized. We need to compare the structure, logic, and specific details of the implementation.",
        "explanation": "These code samples exhibit plagiarism due to their identical logic and structure for calculating BMI, including the same conversion factors and conditional statements for categorizing BMI results. While there are minor differences in variable names and method organization, the core implementation and output are too similar to be coincidental, strongly suggesting that one was derived from the other.",
        "plagiarized": "Yes"
      },
      {
        "code_sample_1": "import java.util.Scanner;  public class T2 {  public static void main(String[] args) {  Scanner input = new Scanner(System.in);   \/\/ Enter radius of the cylinder  System.out.print(\"Enter the radius and length of a cylinder: \");  double radius = input.nextDouble();  double length = input.nextDouble();   double area = radius * radius * 3.14159;  double volume = area * length;   System.out.println(\"The area is \" + area);  System.out.println(\"The volume of the cylinder is \" + volume);  }  }",
        "code_sample_2": "import java.util.Scanner;  \/*  * To change this license header, choose License Headers in Project Properties.  * To change this template file, choose Tools | Templates  * and open the template in the editor.  *\/  \/**  *  * @author CB6AB3315634A1E4D11B091BA48B60BA 7E51EEA5FA101ED4DADE9AD3A7A072BB 2F809B10D1ABEDBF2EC288F851B3EBBB  *\/ public class T02 {  public static void main(String[] args){   Scanner sc = new Scanner(System.in);   System.out.print(\"Enter the radius and length of a cylinder: \");  double radius = sc.nextDouble();  double length = sc.nextDouble();   double area = radius * radius * 3.14159;  double volume = area * length;   System.out.println(\"The area is \" + (float)area);  System.out.printf(\"The volume is %.1f\", volume);  System.out.println();   } }",
        "plagiarized": "No",
        "explanation": "While the two programs are very similar in structure and functionality, they appear to be standard solutions to a common programming exercise for calculating cylinder measurements, which explains their resemblance without necessarily indicating plagiarism. Small differences in implementation details, variable naming, and output formatting suggest these could be independent solutions to the same problem rather than direct copies."
      }
    ],
    "signature_instructions": "Detect if two code samples are plagiarized. In plagiarized field answer only : Yes if the code samples are plagiarized, No otherwise. In explenation field add the reason why the code samples are\/ are not plagiarized.",
    "signature_prefix": "Plagiarized:",
    "extended_signature_instructions": "Detect if two code samples are plagiarized. In plagiarized field answer only : Yes if the code samples are plagiarized, No otherwise. In explenation field add the reason why the code samples are\/ are not plagiarized.",
    "extended_signature_prefix": "Plagiarized:"
  }
}